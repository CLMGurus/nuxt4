{"version":3,"file":"extensions_dicom-video_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA","sources":["file:////home/balasakthi/Downloads/Viewers-master/extensions/dicom-video/src/getSopClassHandlerModule.js","file:////home/balasakthi/Downloads/Viewers-master/extensions/dicom-video/src/id.js","file:////home/balasakthi/Downloads/Viewers-master/extensions/dicom-video/src/index.tsx"],"sourcesContent":["import { SOPClassHandlerId } from './id';\nimport { utils } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport { utilities as csUtils, Enums as csEnums } from '@cornerstonejs/core';\n\nconst SOP_CLASS_UIDS = {\n  VIDEO_MICROSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.2.1',\n  VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.4.1',\n  VIDEO_ENDOSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.1.1',\n  /** Need to use fallback, could be video or image */\n  SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7',\n  MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7.4',\n};\n\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\nconst secondaryCaptureSopClassUids = [\n  SOP_CLASS_UIDS.SECONDARY_CAPTURE_IMAGE_STORAGE,\n  SOP_CLASS_UIDS.MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE,\n];\n\nconst SupportedTransferSyntaxes = {\n  MPEG4_AVC_264_HIGH_PROFILE: '1.2.840.10008.1.2.4.102',\n  MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE: '1.2.840.10008.1.2.4.103',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO: '1.2.840.10008.1.2.4.104',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO: '1.2.840.10008.1.2.4.105',\n  MPEG4_AVC_264_STEREO_HIGH_PROFILE: '1.2.840.10008.1.2.4.106',\n  HEVC_265_MAIN_PROFILE: '1.2.840.10008.1.2.4.107',\n  HEVC_265_MAIN_10_PROFILE: '1.2.840.10008.1.2.4.108',\n};\n\nconst supportedTransferSyntaxUIDs = Object.values(SupportedTransferSyntaxes);\n\nconst _getDisplaySetsFromSeries = (instances, servicesManager, extensionManager) => {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const thumbnailSrc = null;\n  console.warn('dataSource=', dataSource);\n  return instances\n    .filter(metadata => {\n      const tsuid =\n        metadata.AvailableTransferSyntaxUID || metadata.TransferSyntaxUID || metadata['00083002'];\n\n      if (supportedTransferSyntaxUIDs.includes(tsuid)) {\n        return true;\n      }\n\n      if (metadata.SOPClassUID === SOP_CLASS_UIDS.VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE) {\n        return true;\n      }\n\n      // Assume that an instance with one of the secondary capture SOPClassUIDs and\n      // with at least 90 frames (i.e. typically 3 seconds of video) is indeed a video.\n      return (\n        secondaryCaptureSopClassUids.includes(metadata.SOPClassUID) && metadata.NumberOfFrames >= 90\n      );\n    })\n    .map(instance => {\n      const { Modality, SOPInstanceUID, SeriesDescription = 'VIDEO', imageId } = instance;\n      const { SeriesNumber, SeriesDate, SeriesInstanceUID, StudyInstanceUID, NumberOfFrames, url } =\n        instance;\n      const videoUrl = dataSource.retrieve.directURL({\n        instance,\n        singlepart: 'video',\n        tag: 'PixelData',\n        url,\n      });\n      const displaySet = {\n        //plugin: id,\n        Modality,\n        displaySetInstanceUID: utils.guid(),\n        SeriesDescription,\n        SeriesNumber,\n        SeriesDate,\n        SOPInstanceUID,\n        SeriesInstanceUID,\n        StudyInstanceUID,\n        SOPClassHandlerId,\n        referencedImages: null,\n        measurements: null,\n        viewportType: csEnums.ViewportType.VIDEO,\n        instances: [instance],\n        getThumbnailSrc: dataSource.retrieve.getGetThumbnailSrc?.(instance),\n        thumbnailSrc,\n        imageIds: [imageId],\n        isDerivedDisplaySet: true,\n        isLoaded: false,\n        sopClassUids,\n        numImageFrames: NumberOfFrames,\n        instance,\n        supportsWindowLevel: true,\n        label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t(Modality)}`,\n      };\n      csUtils.genericMetadataProvider.add(imageId, {\n        type: 'imageUrlModule',\n        metadata: { rendered: videoUrl },\n      });\n      return displaySet;\n    });\n};\n\nexport default function getSopClassHandlerModule(params) {\n  const { servicesManager, extensionManager } = params;\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-video',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-video`;\n\nexport { SOPClassHandlerId, id };\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { id } from './id';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneVideoViewport');\n});\n\nconst OHIFCornerstoneVideoViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomVideoExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneVideoViewport = props => {\n      return (\n        <OHIFCornerstoneVideoViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-video', component: ExtendedOHIFCornerstoneVideoViewport }];\n  },\n  getSopClassHandlerModule,\n};\n\nfunction _getToolAlias(toolName) {\n  let toolAlias = toolName;\n\n  switch (toolName) {\n    case 'EllipticalRoi':\n      toolAlias = 'SREllipticalRoi';\n      break;\n  }\n\n  return toolAlias;\n}\n\nexport default dicomVideoExtension;\n"],"names":[],"sourceRoot":""}