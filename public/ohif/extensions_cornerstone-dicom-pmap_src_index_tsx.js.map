{"version":3,"file":"extensions_cornerstone-dicom-pmap_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpPA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA","sources":["file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone-dicom-pmap/src/getSopClassHandlerModule.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone-dicom-pmap/src/id.js","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone-dicom-pmap/src/index.tsx"],"sourcesContent":["import { utils, Types as OhifTypes } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport { metaData, cache, utilities as csUtils, volumeLoader } from '@cornerstonejs/core';\nimport { adaptersPMAP } from '@cornerstonejs/adapters';\nimport { SOPClassHandlerId } from './id';\nimport { dicomLoaderService, VOLUME_LOADER_SCHEME } from '@ohif/extension-cornerstone';\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.30'];\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    // Parametric map use to have the same modality as its referenced volume but\n    // \"PMAP\" is used in the viewer even though this is not a valid DICOM modality\n    Modality: 'PMAP',\n    isReconstructable: true, // by default for now\n    displaySetInstanceUID: `pmap.${utils.guid()}`,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    referencedVolumeURI: null,\n    referencedVolumeId: null,\n    isDerivedDisplaySet: true,\n    loadStatus: {\n      loading: false,\n      loaded: false,\n    },\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    supportsWindowLevel: true,\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('PMAP')}`,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the parametric map');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  // Does not get the referenced displaySet during parametric displaySet creation\n  // because it is still not available (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n\n    if (displaySet.referencedDisplaySetInstanceUID) {\n      return displaySetService.getDisplaySetByUID(displaySet.referencedDisplaySetInstanceUID);\n    }\n\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced displaySet is missing for the parametric map');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    return referencedDisplaySet;\n  };\n\n  // Does not get the referenced volumeId during parametric displaySet creation because the\n  // referenced displaySet is still not available  (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferencedVolumeId = () => {\n    if (displaySet.referencedVolumeId) {\n      return displaySet.referencedVolumeId;\n    }\n\n    const referencedDisplaySet = displaySet.getReferenceDisplaySet();\n    const referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `${VOLUME_LOADER_SCHEME}:${referencedVolumeURI}`;\n\n    displaySet.referencedVolumeURI = referencedVolumeURI;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedVolumeId;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nconst getRangeFromPixelData = (pixelData: Float32Array) => {\n  let lowest = pixelData[0];\n  let highest = pixelData[0];\n\n  for (let i = 1; i < pixelData.length; i++) {\n    if (pixelData[i] < lowest) {\n      lowest = pixelData[i];\n    }\n    if (pixelData[i] > highest) {\n      highest = pixelData[i];\n    }\n  }\n\n  return [lowest, highest];\n};\n\nasync function _load(\n  displaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const volumeId = `${VOLUME_LOADER_SCHEME}:${displaySet.displaySetInstanceUID}`;\n  const volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n\n  if (volumeLoadObject) {\n    return volumeLoadObject.promise;\n  }\n\n  displaySet.loading = true;\n  displaySet.isLoaded = false;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  const promise = _loadParametricMap({\n    extensionManager,\n    displaySet,\n    headers,\n  });\n\n  cache.putVolumeLoadObject(volumeId, { promise }).catch(err => {\n    throw err;\n  });\n\n  promise\n    .then(() => {\n      displaySet.loading = false;\n      displaySet.isLoaded = true;\n      // Broadcast that loading is complete\n      servicesManager.services.segmentationService._broadcastEvent(\n        servicesManager.services.segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n        {\n          pmapDisplaySet: displaySet,\n        }\n      );\n    })\n    .catch(err => {\n      displaySet.loading = false;\n      displaySet.isLoaded = false;\n      throw err;\n    });\n\n  return promise;\n}\n\nasync function _loadParametricMap({ displaySet, headers }: withAppTypes) {\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(displaySet, null, headers);\n  const referencedVolumeId = displaySet.getReferencedVolumeId();\n  const cachedReferencedVolume = cache.getVolume(referencedVolumeId);\n\n  // Parametric map can be loaded only if its referenced volume exists otherwise it will fail\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the PMAP, and stack viewport PMAP is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n  const results = await adaptersPMAP.Cornerstone3D.ParametricMap.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData\n  );\n  const { pixelData } = results;\n  const TypedArrayConstructor = pixelData.constructor;\n  const paramMapId = displaySet.displaySetInstanceUID;\n\n  const derivedVolume = await volumeLoader.createAndCacheDerivedVolume(referencedVolumeId, {\n    volumeId: paramMapId,\n    targetBuffer: {\n      type: TypedArrayConstructor.name,\n    },\n  });\n\n  const newPixelData = new TypedArrayConstructor(pixelData.length);\n  for (let i = 0; i < pixelData.length; i++) {\n    newPixelData[i] = pixelData[i] * 100;\n  }\n  derivedVolume.voxelManager.setCompleteScalarDataArray(newPixelData);\n  const range = getRangeFromPixelData(newPixelData);\n  const windowLevel = csUtils.windowLevel.toWindowLevel(range[0], range[1]);\n\n  derivedVolume.metadata.voiLut = [windowLevel];\n  derivedVolume.loadStatus = { loaded: true };\n\n  return derivedVolume;\n}\n\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\n  const { servicesManager, extensionManager } = params;\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-pmap',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-pmap';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { id } from './id';\nimport React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstonePMAPViewport');\n});\n\nconst OHIFCornerstonePMAPViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  id,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstonePMAPViewport = props => {\n      return (\n        <OHIFCornerstonePMAPViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-pmap', component: ExtendedOHIFCornerstonePMAPViewport }];\n  },\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}