{"version":3,"file":"extensions_cornerstone-dicom-pmap_src_viewports_OHIFCornerstonePMAPViewport_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;AAUA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AA1JA;AAgBA;AAAA;AA4IA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA","sources":["file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone-dicom-pmap/src/viewports/OHIFCornerstonePMAPViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport { OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\n\nfunction OHIFCornerstonePMAPViewport(props: withAppTypes) {\n  const { displaySets, children, viewportOptions, displaySetOptions, servicesManager } = props;\n  const viewportId = viewportOptions.viewportId;\n  const { displaySetService, segmentationService, uiNotificationService, customizationService } =\n    servicesManager.services;\n\n  // PMAP viewport will always have a single display set\n  if (displaySets.length !== 1) {\n    throw new Error('PMAP viewport must have a single display set');\n  }\n\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\n    'ui.loadingIndicatorTotalPercent'\n  );\n\n  const pmapDisplaySet = displaySets[0];\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const referencedDisplaySetRef = useRef(null);\n  const { viewports, activeViewportId } = viewportGrid;\n  const referencedDisplaySet = pmapDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    pmapDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n\n  const [pmapIsLoading, setPmapIsLoading] = useState(!pmapDisplaySet.isLoaded);\n\n  // Add effect to listen for loading complete\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.pmapDisplaySet?.displaySetInstanceUID === pmapDisplaySet.displaySetInstanceUID) {\n          setPmapIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [pmapDisplaySet]);\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n\n    displaySetOptions.unshift({});\n    const [pmapDisplaySetOptions] = displaySetOptions;\n\n    // Make sure `options` exists\n    pmapDisplaySetOptions.options = pmapDisplaySetOptions.options ?? {};\n\n    Object.assign(pmapDisplaySetOptions.options, {\n      colormap: {\n        name: 'rainbow_2',\n        opacity: [\n          { value: 0, opacity: 0 },\n          { value: 0.25, opacity: 0.25 },\n          { value: 0.5, opacity: 0.5 },\n          { value: 0.75, opacity: 0.75 },\n          { value: 0.9, opacity: 0.99 },\n        ],\n      },\n      voi: {\n        windowCenter: 50,\n        windowWidth: 100,\n      },\n    });\n\n    uiNotificationService.show({\n      title: 'Parametric Map',\n      type: 'warning',\n      message: 'The values are multiplied by 100 in the viewport for better visibility',\n    });\n\n    return (\n      <OHIFCornerstoneViewport\n        {...props}\n        // Referenced + PMAP displaySets must be passed as parameter in this order\n        displaySets={[referencedDisplaySet, pmapDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n          presentationIds: viewportOptions.presentationIds,\n        }}\n        displaySetOptions={[{}, pmapDisplaySetOptions]}\n      />\n    );\n  }, [\n    displaySetOptions,\n    props,\n    pmapDisplaySet,\n    viewportOptions.orientation,\n    viewportOptions.viewportId,\n    viewportOptions.presentationIds,\n    uiNotificationService,\n  ]);\n\n  // Cleanup the PMAP viewport when the viewport is destroyed\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, [activeViewportId, displaySetService, viewportGridService, viewports]);\n\n  let childrenWithProps = null;\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {pmapIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={null}\n            percentComplete={null}\n            loadingText=\"Loading Parametric Map...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstonePMAPViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, pmapDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = pmapDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstonePMAPViewport;\n"],"names":[],"sourceRoot":""}