{"version":3,"file":"node_modules_cornerstonejs_tools_dist_esm_enums_index_js-extensions_usAnnotation_src_index_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AAOA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAseA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAMA;AAAA;AAzYA;AACA;AAAA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/PleuraBlinePercentage.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/getCommandsModule.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/getInstanceByImageId.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/getPanelModule.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/id.js","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/index.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/usAnnotation/src/panels/USAnnotationPanel.tsx","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","file:////home/balasakthi/Downloads/Viewers-master/node_modules/@cornerstonejs/tools/dist/esm/enums/index.js"],"sourcesContent":["// Global state to control whether to show the percentage in the overlay\nexport let showPercentage = true;\n\n/**\n * Sets whether to show the pleura percentage in the viewport overlay\n * @param value - Boolean indicating whether to show the percentage\n */\nexport function setShowPercentage(value) {\n  showPercentage = value;\n}\n","import { UltrasoundPleuraBLineTool, Enums as csToolsEnums } from '@cornerstonejs/tools';\nimport { Types as OhifTypes } from '@ohif/core';\nimport { eventTarget, triggerEvent, utilities } from '@cornerstonejs/core';\nimport getInstanceByImageId from './getInstanceByImageId';\nimport { setShowPercentage } from './PleuraBlinePercentage';\n\nconst { transformWorldToIndex } = utilities;\n\n/**\n * Creates and returns the commands module for ultrasound annotation\n * @param params - Extension parameters including servicesManager and commandsManager\n * @returns The commands module with actions and definitions\n */\nfunction commandsModule({\n  servicesManager,\n  commandsManager,\n}: OhifTypes.Extensions.ExtensionParams): OhifTypes.Extensions.CommandsModule {\n  const { viewportGridService, toolGroupService, cornerstoneViewportService } =\n    servicesManager.services as AppTypes.Services;\n\n  const actions = {\n    /**\n     * Switches the active ultrasound annotation type\n     * @param options - Object containing the annotationType to switch to\n     */\n    switchUSPleuraBLineAnnotation: ({ annotationType }) => {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\n      if (!toolGroup) {\n        return;\n      }\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\n      if (usAnnotation) {\n        usAnnotation.setActiveAnnotationType(annotationType);\n      }\n    },\n    /**\n     * Convenience method to switch to pleura line annotation type\n     */\n    switchUSPleuraBLineAnnotationToPleuraLine: () => {\n      actions.switchUSPleuraBLineAnnotation({\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA,\n      });\n    },\n    /**\n     * Convenience method to switch to B-line annotation type\n     */\n    switchUSPleuraBLineAnnotationToBLine: () => {\n      actions.switchUSPleuraBLineAnnotation({\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE,\n      });\n    },\n    /**\n     * Deletes the last annotation of the specified type\n     * @param options - Object containing the annotationType to delete\n     */\n    deleteLastUSPleuraBLineAnnotation: ({ annotationType }) => {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\n      if (!toolGroup) {\n        return;\n      }\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\n      if (usAnnotation) {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        usAnnotation.deleteLastAnnotationType(viewport.element, annotationType);\n        viewport.render();\n      }\n    },\n\n    /**\n     * Convenience method to delete the last pleura line annotation\n     */\n    deleteLastPleuraAnnotation: () => {\n      actions.deleteLastUSPleuraBLineAnnotation({\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA,\n      });\n    },\n    /**\n     * Convenience method to delete the last B-line annotation\n     */\n    deleteLastBLineAnnotation: () => {\n      actions.deleteLastUSPleuraBLineAnnotation({\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE,\n      });\n    },\n    /**\n     * Toggles a boolean attribute of the ultrasound annotation tool\n     * @param options - Object containing the attribute name to toggle\n     */\n    toggleUSToolAttribute: ({ attribute }) => {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\n      if (!toolGroup) {\n        return;\n      }\n      const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\n      if (!configuration) {\n        return;\n      }\n      toolGroup.setToolConfiguration(UltrasoundPleuraBLineTool.toolName, {\n        [attribute]: !configuration[attribute],\n      });\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n      viewport.render();\n    },\n    /**\n     * Sets a specific attribute of the ultrasound annotation tool to a given value\n     * @param options - Object containing the attribute name and value to set\n     */\n    setUSToolAttribute: ({ attribute, value }) => {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\n      if (!toolGroup) {\n        return;\n      }\n      const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\n      if (!configuration) {\n        return;\n      }\n      toolGroup.setToolConfiguration(UltrasoundPleuraBLineTool.toolName, {\n        [attribute]: value,\n      });\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n      viewport.render();\n    },\n    /**\n     * Toggles the display of fan annotations\n     */\n    toggleDisplayFanAnnotation: () => {\n      actions.toggleUSToolAttribute({\n        attribute: 'showFanAnnotations',\n      });\n    },\n    /**\n     * Toggles the display of the depth guide\n     */\n    toggleDepthGuide: () => {\n      actions.toggleUSToolAttribute({\n        attribute: 'drawDepthGuide',\n      });\n    },\n    /**\n     * Sets the depth guide display state\n     * @param options - Object containing the boolean value to set\n     */\n    setDepthGuide: ({ value }) => {\n      actions.setUSToolAttribute({\n        attribute: 'drawDepthGuide',\n        value,\n      });\n    },\n    /**\n     * Sets the fan annotation display state\n     * @param options - Object containing the boolean value to set\n     */\n    setDisplayFanAnnotation: ({ value }) => {\n      actions.setUSToolAttribute({\n        attribute: 'showFanAnnotations',\n        value,\n      });\n    },\n    /**\n     * Sets whether to show the pleura percentage in the viewport overlay\n     * @param options - Object containing the boolean value to set\n     */\n    setShowPleuraPercentage: ({ value }) => {\n      setShowPercentage(value);\n      // Trigger ANNOTATION_MODIFIED event to update the overlay\n      triggerEvent(eventTarget, csToolsEnums.Events.ANNOTATION_MODIFIED, {\n        annotation: {\n          metadata: {\n            toolName: UltrasoundPleuraBLineTool.toolName,\n          },\n        },\n      });\n    },\n    /**\n     * Generates a JSON representation of the ultrasound annotations\n     * @param labels - Array of annotation labels\n     * @param imageIds - Array of image IDs to include in the JSON\n     * @returns A JSON object containing the annotations data or undefined if generation fails\n     */\n    generateUSPleuraBLineAnnotationsJSON: (labels: string[] = [], imageIds: string[] = []) => {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n      if (!viewport) {\n        return;\n      }\n      const { imageData } = viewport.getImageData() || {};\n      if (!imageData) {\n        return;\n      }\n\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\n      if (!toolGroup) {\n        return;\n      }\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\n      if (usAnnotation) {\n        const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\n        const imageId = viewport.getCurrentImageId();\n        const filterImageIds = (imageId: string) => {\n          if (imageIds.length === 0) {\n            return true;\n          } else {\n            return imageIds.includes(imageId);\n          }\n        };\n        const annotations = UltrasoundPleuraBLineTool.filterAnnotations(\n          viewport.element,\n          filterImageIds\n        );\n        const frame_annotations = {};\n        const viewportImageIds = viewport.getImageIds();\n        annotations.forEach(annotation => {\n          const imageId = annotation.metadata.referencedImageId;\n          const { annotationType } = annotation.data;\n          const [point1, point2] = annotation.data.handles.points;\n          const p1 = transformWorldToIndex(imageData, point1);\n          const p2 = transformWorldToIndex(imageData, point2);\n          const imageIdIndex = viewportImageIds.indexOf(imageId);\n          if (frame_annotations[imageIdIndex] === undefined) {\n            frame_annotations[imageIdIndex] = {\n              pleura_lines: [],\n              b_lines: [],\n            };\n          }\n          if (annotationType === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            frame_annotations[imageIdIndex].pleura_lines.push([\n              [p1[0], p1[1], 0],\n              [p2[0], p2[1], 0],\n            ]);\n          } else if (\n            annotationType === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE\n          ) {\n            frame_annotations[imageIdIndex].b_lines.push([\n              [p1[0], p1[1], 0],\n              [p2[0], p2[1], 0],\n            ]);\n          }\n        });\n\n        const instance = getInstanceByImageId(servicesManager.services, imageId);\n        const json = {\n          SOPInstanceUID: instance.SOPInstanceUID,\n          GrayscaleConversion: false,\n          mask_type: 'fan',\n          angle1: configuration.startAngle,\n          angle2: configuration.endAngle,\n          center_rows_px: configuration.center[0],\n          center_cols_px: configuration.center[1],\n          radius1: configuration.innerRadius,\n          radius2: configuration.outerRadius,\n          image_size_rows: instance.rows,\n          image_size_cols: instance.columns,\n          AnnotationLabels: labels,\n          frame_annotations,\n        };\n        return json;\n      }\n    },\n    /**\n     * Downloads the ultrasound annotations as a JSON file\n     * @param options - Object containing labels and imageIds arrays\n     */\n    downloadUSPleuraBLineAnnotationsJSON({ labels = [], imageIds = [] }) {\n      const json = actions.generateUSPleuraBLineAnnotationsJSON(labels, imageIds);\n      if (!json) {\n        return;\n      }\n\n      // Convert JSON object to a string\n      const jsonString = JSON.stringify(json, null, 2);\n\n      // Create a blob with the JSON data\n      const blob = new Blob([jsonString], { type: 'application/json' });\n\n      // Create a URL for the blob\n      const url = URL.createObjectURL(blob);\n\n      // Create an anchor element\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ultrasound_annotations_${new Date().toISOString().slice(0, 10)}.json`;\n\n      // Append to the document, click to download, and remove\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n\n      // Clean up by revoking the URL\n      URL.revokeObjectURL(url);\n    },\n  };\n\n  const definitions = {\n    switchUSAnnotation: {\n      commandFn: actions.switchUSPleuraBLineAnnotation,\n    },\n    deleteLastAnnotation: {\n      commandFn: actions.deleteLastUSPleuraBLineAnnotation,\n    },\n    toggleDepthGuide: {\n      commandFn: actions.toggleDepthGuide,\n    },\n    setDepthGuide: {\n      commandFn: actions.setDepthGuide,\n    },\n    setShowPleuraPercentage: {\n      commandFn: actions.setShowPleuraPercentage,\n    },\n    toggleUSToolAttribute: {\n      commandFn: actions.toggleUSToolAttribute,\n    },\n    setUSToolAttribute: {\n      commandFn: actions.setUSToolAttribute,\n    },\n    toggleDisplayFanAnnotation: {\n      commandFn: actions.toggleDisplayFanAnnotation,\n    },\n    setDisplayFanAnnotation: {\n      commandFn: actions.setDisplayFanAnnotation,\n    },\n    generateJSON: {\n      commandFn: actions.generateUSPleuraBLineAnnotationsJSON,\n    },\n    downloadJSON: {\n      commandFn: actions.downloadUSPleuraBLineAnnotationsJSON,\n    },\n    switchUSAnnotationToPleuraLine: {\n      commandFn: actions.switchUSPleuraBLineAnnotationToPleuraLine,\n    },\n    switchUSAnnotationToBLine: {\n      commandFn: actions.switchUSPleuraBLineAnnotationToBLine,\n    },\n    deleteLastPleuraAnnotation: {\n      commandFn: actions.deleteLastPleuraAnnotation,\n    },\n    deleteLastBLineAnnotation: {\n      commandFn: actions.deleteLastBLineAnnotation,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'CORNERSTONE',\n  };\n}\n\nexport default commandsModule;\n","/**\n * Retrieves the DICOM instance associated with a specific imageId\n * @param services - The OHIF services object\n * @param imageId - The image ID to find the instance for\n * @returns The DICOM instance object or undefined if not found\n */\nexport default function getInstanceByImageId(services: AppTypes.Services, imageId: string) {\n  const activeDisplaySets = services.displaySetService.getActiveDisplaySets();\n  const displaySet = activeDisplaySets.find(displaySet => displaySet?.imageIds?.includes(imageId));\n  return displaySet?.instance;\n}\n","import React from 'react';\n\nimport USAnnotationPanel from './panels/USAnnotationPanel';\n\n/**\n * Creates and returns the panel module for ultrasound annotation\n * @param params - Object containing commandsManager, servicesManager, and extensionManager\n * @returns Array of panel configurations\n */\nconst getPanelModule = ({ commandsManager, servicesManager, extensionManager }: withAppTypes) => {\n  /**\n   * Wrapper component for the USAnnotationPanel that injects the required props\n   * @param props - Component props including configuration\n   * @returns The wrapped USAnnotationPanel component\n   */\n  const wrappedUSAnnotationPanel = ({ configuration }) => {\n    return <USAnnotationPanel />;\n  };\n\n  return [\n    {\n      name: 'USAnnotationPanel',\n      iconName: 'tab-linear',\n      iconLabel: 'US Annotation',\n      label: 'USAnnotation',\n      component: wrappedUSAnnotationPanel,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { id } from './id';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './getCommandsModule';\nimport { showPercentage, setShowPercentage } from './PleuraBlinePercentage';\n/**\n * You can remove any of the following modules if you don't need them.\n */\nexport default {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  /**\n   * CommandsModule should provide a list of commands that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each command is defined by\n   * an object of { actions, definitions, defaultContext } where actions is an\n   * object of functions, definitions is an object of available commands, their\n   * options, and defaultContext is the default context for the command to run against.\n   */\n  getCommandsModule,\n};\n\nexport { showPercentage, setShowPercentage };\n","import React, { useEffect, useState } from 'react';\nimport { Enums as csToolsEnums, UltrasoundPleuraBLineTool } from '@cornerstonejs/tools';\nimport { eventTarget, utilities } from '@cornerstonejs/core';\nimport { useSystem } from '@ohif/core';\n\nimport {\n  /* Layout */\n  PanelSection,\n  ScrollArea,\n  /* Controls */\n  Label,\n  Button,\n  Icons,\n  Switch,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  Separator,\n} from '@ohif/ui-next';\n\n/**\n * A side panel that drives the ultrasound annotation workflow.\n * It provides controls for managing annotations, toggling display options,\n * and downloading annotations as JSON.\n * @returns The USAnnotationPanel component\n */\nexport default function USAnnotationPanel() {\n  const { servicesManager, commandsManager } = useSystem();\n\n  /** ──────────────────────────────────────────────────────\n   * Local state – purely UI related (no business logic).   */\n\n  const { viewportGridService, cornerstoneViewportService, measurementService } =\n    servicesManager.services as AppTypes.Services;\n\n  // UI state variables\n  const [depthGuide, setDepthGuide] = useState(true);\n  const [autoAdd, setAutoAdd] = useState(true);\n  const [showPleuraPct, setShowPleuraPct] = useState(true);\n  const [showOverlay, setShowOverlay] = useState(true);\n\n  // Data state variables\n  const [annotatedFrames, setAnnotatedFrames] = useState<any[]>([]);\n  const [imageIdsToObserve, setImageIdsToObserve] = useState<string[]>([]);\n  const [labels, setLabels] = useState<string[]>([]);\n\n  /** ──────────────────────────────────────────────────────\n   * Helper – commands bridging back to OHIF services.       */\n\n  /**\n   * Switches the active annotation type (pleura or B-line)\n   * @param type - The annotation type to switch to\n   */\n  const switchAnnotation = (type: string) => {\n    commandsManager.runCommand('setToolActive', { toolName: UltrasoundPleuraBLineTool.toolName });\n    commandsManager.runCommand('switchUSAnnotation', { annotationType: type });\n  };\n\n  /**\n   * Deletes the last annotation of the specified type\n   * @param type - The annotation type to delete\n   */\n  const deleteLast = (type: string) => {\n    commandsManager.runCommand('deleteLastAnnotation', { annotationType: type });\n    updateAnnotatedFrames();\n  };\n\n  /**\n   * Sets the depth guide display state\n   * @param value - Boolean indicating whether to show the depth guide\n   */\n  const setDepthGuideCommand = (value: boolean) => {\n    commandsManager.runCommand('setDepthGuide', { value });\n    setDepthGuide(value);\n  };\n  /**\n   * Sets the auto-add annotations state\n   * When enabled, all frames are monitored for annotations\n   * When disabled, only manually added frames are monitored\n   * @param value - Boolean indicating whether to auto-add annotations\n   */\n  const setAutoAddCommand = (value: boolean) => {\n    if (value) {\n      setImageIdsToObserve([]);\n    } else {\n      const imageIds = annotatedFrames.map(item => item.imageId);\n      if (imageIds.length > 0) {\n        setImageIdsToObserve(imageIds);\n      } else {\n        setImageIdsToObserve(['Manual']);\n      }\n    }\n    setAutoAdd(value);\n  };\n  /**\n   * Sets whether to show the pleura percentage in the viewport overlay\n   * @param value - Boolean indicating whether to show the percentage\n   */\n  const setShowPleuraPercentageCommand = (value: boolean) => {\n    commandsManager.runCommand('setShowPleuraPercentage', { value });\n    setShowPleuraPct(value);\n  };\n  /**\n   * Sets whether to show the fan overlay in the viewport\n   * @param value - Boolean indicating whether to show the overlay\n   */\n  const setShowOverlayCommand = (value: boolean) => {\n    commandsManager.runCommand('setDisplayFanAnnotation', { value });\n    setShowOverlay(value);\n  };\n  /**\n   * Downloads the annotations as a JSON file\n   * Uses the labels and imageIdsToObserve state variables\n   */\n  const downloadJSON = () => {\n    commandsManager.runCommand('downloadJSON', { labels, imageIds: imageIdsToObserve });\n  };\n\n  /**\n   * Adds the current image ID to the list of monitored image IDs\n   * Only works when auto-add is disabled\n   */\n  const addCurrentImageId = () => {\n    if (!autoAdd) {\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n      const currentImageId = viewport.getCurrentImageId();\n      const imageIds = [...imageIdsToObserve];\n      if (!imageIds.includes(currentImageId)) {\n        imageIds.push(currentImageId);\n      }\n      setImageIdsToObserve(imageIds);\n    }\n  };\n\n  /**\n   * Handles clicking on a row in the annotated frames table\n   * Scrolls the viewport to the selected frame\n   * @param item - The annotated frame item that was clicked\n   */\n  const handleRowClick = item => {\n    const activeViewportId = viewportGridService.getActiveViewportId();\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n    utilities.scroll(viewport, { delta: item.frame - viewport.getCurrentImageIdIndex() });\n  };\n\n  /**\n   * Render helpers so the JSX doesn’t become spaghetti.     */\n  const renderWorkflowToggles = () => (\n    <PanelSection.Content>\n      <div className=\"space-y-3 p-2 text-sm text-white\">\n        <div className=\"flex items-center\">\n          <Switch\n            id=\"depth-guide-switch\"\n            className=\"mr-3\"\n            checked={depthGuide}\n            onCheckedChange={() => setDepthGuideCommand(!depthGuide)}\n          />\n          <label\n            htmlFor=\"depth-guide-switch\"\n            className=\"cursor-pointer\"\n            onClick={() => setDepthGuideCommand(!depthGuide)}\n          >\n            Depth guide toggle\n          </label>\n        </div>\n\n        {/* <div className=\"flex items-center\">\n          <Switch\n            id=\"auto-add-switch\"\n            className=\"mr-3\"\n            checked={autoAdd}\n            onCheckedChange={() => setAutoAddCommand(!autoAdd)}\n          />\n          <label\n            htmlFor=\"auto-add-switch\"\n            className=\"cursor-pointer\"\n            onClick={() => setAutoAddCommand(!autoAdd)}\n          >\n            Auto-add annotations\n          </label>\n        </div> */}\n\n        <div className=\"flex items-center\">\n          <Switch\n            id=\"pleura-percentage-switch\"\n            className=\"mr-3\"\n            checked={showPleuraPct}\n            onCheckedChange={() => setShowPleuraPercentageCommand(!showPleuraPct)}\n          />\n          <label\n            htmlFor=\"pleura-percentage-switch\"\n            className=\"cursor-pointer\"\n            onClick={() => setShowPleuraPercentageCommand(!showPleuraPct)}\n          >\n            Show pleura percentage\n          </label>\n        </div>\n      </div>\n    </PanelSection.Content>\n  );\n\n  const renderSectorAnnotations = () => (\n    <PanelSection.Content>\n      <div className=\"flex flex-col gap-4 p-2\">\n        <Label>Sector Annotations</Label>\n        <div className=\"flex items-center gap-2\">\n          <Tabs\n            defaultValue={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE}\n            onValueChange={newValue => switchAnnotation(newValue)}\n          >\n            <TabsList>\n              <TabsTrigger value={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA}>\n                <Icons.Plus /> Pleura line\n              </TabsTrigger>\n              <TabsTrigger value={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE}>\n                <Icons.Plus /> B-line\n              </TabsTrigger>\n              <Separator orientation=\"vertical\" />\n              <Separator orientation=\"vertical\" />\n            </TabsList>\n          </Tabs>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"ml-auto\">\n                <Icons.More />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem\n                onClick={() =>\n                  deleteLast(UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE)\n                }\n              >\n                <Icons.Delete className=\"text-foreground\" />\n                <span className=\"pl-2\">B-line annotation</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() =>\n                  deleteLast(UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA)\n                }\n              >\n                <Icons.Delete className=\"text-foreground\" />\n                <span className=\"pl-2\">Pleura annotation</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        <div className=\"mt-2 flex items-center gap-2\">\n          <Switch\n            id=\"show-overlay-switch\"\n            checked={showOverlay}\n            onCheckedChange={() => setShowOverlayCommand(!showOverlay)}\n            className=\"data-[state=checked]:bg-blue-500\"\n          />\n          <label htmlFor=\"show-overlay-switch\" className=\"cursor-pointer text-blue-300\">\n            Show Overlay\n          </label>\n        </div>\n\n        {/* Divider */}\n        <hr className=\"border-t border-gray-800\" />\n      </div>\n    </PanelSection.Content>\n  );\n\n  const renderAnnotatedFrames = () => (\n    <ScrollArea className=\"h-full\">\n      <PanelSection.Content>\n        <div className=\"mb-4 flex items-center justify-between\">\n          {/* <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-blue-300\"\n            disabled={autoAdd}\n            onClick={addCurrentImageId}\n          >\n            <Icons.Plus className=\"mr-2\" /> Add current frame\n          </Button> */}\n          <Button variant=\"ghost\" onClick={() => downloadJSON()}>\n            <Icons.Download className=\"h-5 w-5\" />\n            <span>JSON</span>\n          </Button>\n          <Button variant=\"ghost\" onClick={() => setShowOverlayCommand(!showOverlay)}>\n            {showOverlay ? <Icons.Hide className=\"h-5 w-5\" /> : <Icons.Show className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n        <div className=\"w-full overflow-hidden\">\n          <table className=\"w-full border-collapse text-sm\">\n            <thead>\n              <tr className=\"border-b border-blue-900 text-blue-300\">\n                <th></th>\n                <th className=\"py-2 px-3 text-left\">Frame</th>\n                <th className=\"py-2 px-3 text-center\">Pleura lines</th>\n                <th className=\"py-2 px-3 text-center\">B-lines</th>\n                <th className=\"w-10\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {annotatedFrames.map(item => (\n                <tr\n                  key={item.frame}\n                  className={`border-b border-blue-900 ${\n                    item.frame === 5 ? 'bg-cyan-800 bg-opacity-30' : ''\n                  }`}\n                  onClick={() => handleRowClick(item)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  <td className=\"py-3 px-3\">{item.index}</td>\n                  <td className=\"py-3 px-3\">{item.frame + 1}</td>\n                  <td className=\"py-3 px-3 text-center\">{item.pleura}</td>\n                  <td className=\"py-3 px-3 text-center\">{item.bLine}</td>\n                  <td className=\"py-3 px-3 text-right\">\n                    {item.frame === 5 && (\n                      <div className=\"flex items-center justify-end\">\n                        <Button variant=\"ghost\" className=\"p-0 text-blue-300\">\n                          <Icons.EyeVisible />\n                        </Button>\n                        <Button variant=\"ghost\" className=\"ml-2 p-0 text-blue-300\">\n                          <Icons.More />\n                        </Button>\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </PanelSection.Content>\n    </ScrollArea>\n  );\n\n  const updateAnnotatedFrames = () => {\n    const activeViewportId = viewportGridService.getActiveViewportId();\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n    // copying to avoid mutating the original array\n    const imageIdsMonitored = [...imageIdsToObserve];\n    const imageIdFilter = (imageId: string) => {\n      if (imageIdsMonitored.length === 0) {\n        return true;\n      }\n      return imageIdsMonitored.includes(imageId);\n    };\n    const mapping = UltrasoundPleuraBLineTool.countAnnotations(viewport.element, imageIdFilter);\n    if (!mapping) {\n      setAnnotatedFrames([]);\n      return;\n    }\n    const keys = Array.from(mapping.keys());\n    const updatedFrames = keys.map((key, index) => {\n      const { pleura, bLine, frame } = mapping.get(key) || { pleura: 0, bLine: 0, frame: 0 };\n      return { imageId: key, index: index + 1, frame, pleura, bLine };\n    });\n    setAnnotatedFrames(updatedFrames);\n  };\n  /**\n   * Callback function that is called when an annotation is modified\n   * Updates the annotatedFrames state with the latest annotation data\n   */\n  const annotationModified = React.useCallback(\n    event => {\n      if (event.detail.annotation.metadata.toolName === UltrasoundPleuraBLineTool.toolName) {\n        updateAnnotatedFrames();\n      }\n    },\n    [viewportGridService, cornerstoneViewportService, imageIdsToObserve]\n  );\n\n  useEffect(() => {\n    eventTarget.addEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\n    const { unsubscribe } = measurementService.subscribe(\n      measurementService.EVENTS.MEASUREMENT_REMOVED,\n      () => {\n        updateAnnotatedFrames();\n      }\n    );\n\n    return () => {\n      eventTarget.removeEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\n      unsubscribe();\n    };\n  }, [annotationModified, measurementService]);\n\n  /**\n   * ──────────────────────────────────────────────────────\n   *  🖼  Final Render                                      */\n  return (\n    <div\n      className=\"h-full bg-black text-white\"\n      style={{ minWidth: 240, maxWidth: 480, width: '100%' }}\n    >\n      {/* Workflow */}\n      <PanelSection>\n        <PanelSection.Header>Workflow</PanelSection.Header>\n        {renderWorkflowToggles()}\n      </PanelSection>\n\n      {/* Progress\n      <PanelSection>\n        <SectionHeader title=\"Workflow Progress\" actionLabel=\"Source Folder\" />\n        {renderWorkflowProgress()}\n      </PanelSection> */}\n\n      {/* Annotations */}\n      <PanelSection>\n        <PanelSection.Header> Annotations </PanelSection.Header>\n        {renderSectorAnnotations()}\n      </PanelSection>\n\n      {/* Annotated frames */}\n      <PanelSection className=\"flex-1\">\n        <PanelSection.Header> Annotated Frames </PanelSection.Header>\n        {renderAnnotatedFrames()}\n      </PanelSection>\n    </div>\n  );\n}\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import { MouseBindings, KeyboardBindings } from './ToolBindings';\nimport ToolModes from './ToolModes';\nimport AnnotationStyleStates from './AnnotationStyleStates';\nimport Events from './Events';\nimport SegmentationRepresentations from './SegmentationRepresentations';\nimport { Swipe } from './Touch';\nimport StrategyCallbacks from './StrategyCallbacks';\nimport ChangeTypes from './ChangeTypes';\nimport WorkerTypes from './WorkerTypes';\nexport { MouseBindings, KeyboardBindings, ToolModes, AnnotationStyleStates, Events, SegmentationRepresentations, Swipe, StrategyCallbacks, ChangeTypes, WorkerTypes, };\n"],"names":[],"sourceRoot":""}