{"version":3,"file":"extensions_cornerstone_src_Viewport_OHIFCornerstoneViewport_tsx.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAGA;AAAA;AA/RA;AAiSA;AAjSA;;AAmSA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AAIA;AAIA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5jBA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAxEA;AA0EA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgBA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAOA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AAHA;AAxNA;AAkBA;AAAA;AA0MA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;;AAEA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzdA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AA7FA;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAzEA;AA2EA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAAA;AAEA;AAAA;AAGA;AAWA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAxKA;AAYA;AAAA;AAsKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvPA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAnJA;AAYA;AAAA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AA1FA;AA4FA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAMA;AAAA;AA/EA;AAEA;AAAA;AA+EA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.css?83dc","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.css?ab6b","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.css?ca32","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/utils.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/components/CinePlayer/index.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/utils/ActiveViewportBehavior.tsx","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/utils/presentations/getViewportPresentations.ts","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.css","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.css","file:////home/balasakthi/Downloads/Viewers-master/extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.css"],"sourcesContent":["var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./OHIFCornerstoneViewport.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport * as cs3DTools from '@cornerstonejs/tools';\nimport { Enums, eventTarget, getEnabledElement } from '@cornerstonejs/core';\nimport { MeasurementService, useViewportRef } from '@ohif/core';\nimport { useViewportDialog } from '@ohif/ui-next';\nimport type { Types as csTypes } from '@cornerstonejs/core';\n\nimport { setEnabledElement } from '../state';\n\nimport './OHIFCornerstoneViewport.css';\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\nimport CinePlayer from '../components/CinePlayer';\nimport type { Types } from '@ohif/core';\n\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\nimport ViewportColorbarsContainer from '../components/ViewportColorbar';\nimport { getViewportPresentations } from '../utils/presentations/getViewportPresentations';\nimport { useSynchronizersStore } from '../stores/useSynchronizersStore';\nimport ActiveViewportBehavior from '../utils/ActiveViewportBehavior';\nimport { WITH_NAVIGATION } from '../services/ViewportService/CornerstoneViewportService';\n\nconst STACK = 'stack';\n\n// Cache for viewport dimensions, persists across component remounts\nconst viewportDimensions = new Map<string, { width: number; height: number }>();\n\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\n// Then we don't need to worry about the re-renders if the props change.\nconst OHIFCornerstoneViewport = React.memo(\n  (\n    props: withAppTypes<{\n      viewportId: string;\n      displaySets: AppTypes.DisplaySet[];\n      viewportOptions: AppTypes.ViewportGrid.GridViewportOptions;\n      initialImageIndex: number;\n    }>\n  ) => {\n    const {\n      displaySets,\n      dataSource,\n      viewportOptions,\n      displaySetOptions,\n      servicesManager,\n      onElementEnabled,\n      // eslint-disable-next-line react/prop-types\n      onElementDisabled,\n      isJumpToMeasurementDisabled = false,\n      // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n      // of the imageData in the OHIFCornerstoneViewport. This prop is used\n      // to set the initial state of the viewport's first image to render\n      // eslint-disable-next-line react/prop-types\n      initialImageIndex,\n      // if the viewport is part of a hanging protocol layout\n      // we should not really rely on the old synchronizers and\n      // you see below we only rehydrate the synchronizers if the viewport\n      // is not part of the hanging protocol layout. HPs should\n      // define their own synchronizers. Since the synchronizers are\n      // viewportId dependent and\n      // eslint-disable-next-line react/prop-types\n      isHangingProtocolLayout,\n    } = props;\n    const viewportId = viewportOptions.viewportId;\n\n    if (!viewportId) {\n      throw new Error('Viewport ID is required');\n    }\n\n    // Make sure displaySetOptions has one object per displaySet\n    while (displaySetOptions.length < displaySets.length) {\n      displaySetOptions.push({});\n    }\n\n    // Since we only have support for dynamic data in volume viewports, we should\n    // handle this case here and set the viewportType to volume if any of the\n    // displaySets are dynamic volumes\n    viewportOptions.viewportType = displaySets.some(\n      ds => ds.isDynamicVolume && ds.isReconstructable\n    )\n      ? 'volume'\n      : viewportOptions.viewportType;\n\n    const [scrollbarHeight, setScrollbarHeight] = useState('100px');\n    const [enabledVPElement, setEnabledVPElement] = useState(null);\n    const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n    const viewportRef = useViewportRef(viewportId);\n\n    const {\n      displaySetService,\n      toolbarService,\n      toolGroupService,\n      syncGroupService,\n      cornerstoneViewportService,\n      segmentationService,\n      cornerstoneCacheService,\n      customizationService,\n      measurementService,\n    } = servicesManager.services;\n\n    const [viewportDialogState] = useViewportDialog();\n    // useCallback for scroll bar height calculation\n    const setImageScrollBarHeight = useCallback(() => {\n      const scrollbarHeight = `${elementRef.current.clientHeight - 10}px`;\n      setScrollbarHeight(scrollbarHeight);\n    }, [elementRef]);\n\n    // useCallback for onResize\n    const onResize = useCallback(\n      (entries: ResizeObserverEntry[]) => {\n        if (elementRef.current && entries?.length) {\n          const entry = entries[0];\n          const { width, height } = entry.contentRect;\n\n          const prevDimensions = viewportDimensions.get(viewportId) || { width: 0, height: 0 };\n\n          // Check if dimensions actually changed and then only resize if they have changed\n          const hasDimensionsChanged =\n            prevDimensions.width !== width || prevDimensions.height !== height;\n\n          if (width > 0 && height > 0 && hasDimensionsChanged) {\n            viewportDimensions.set(viewportId, { width, height });\n            // Perform resize operations\n            cornerstoneViewportService.resize();\n            setImageScrollBarHeight();\n          }\n        }\n      },\n      [viewportId, elementRef, cornerstoneViewportService, setImageScrollBarHeight]\n    );\n\n    useEffect(() => {\n      const element = elementRef.current;\n      if (!element) {\n        return;\n      }\n\n      const resizeObserver = new ResizeObserver(onResize);\n      resizeObserver.observe(element);\n\n      // Cleanup function\n      return () => {\n        resizeObserver.unobserve(element);\n        resizeObserver.disconnect();\n      };\n    }, [onResize]);\n\n    const cleanUpServices = useCallback(\n      viewportInfo => {\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\n        const syncGroups = viewportInfo.getSyncGroups();\n\n        toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\n        syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n        segmentationService.clearSegmentationRepresentations(viewportId);\n      },\n      [viewportId, segmentationService, syncGroupService, toolGroupService]\n    );\n\n    const elementEnabledHandler = useCallback(\n      evt => {\n        // check this is this element reference and return early if doesn't match\n        if (evt.detail.element !== elementRef.current) {\n          return;\n        }\n\n        const { viewportId, element } = evt.detail;\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        if (!viewportInfo) {\n          return;\n        }\n\n        setEnabledElement(viewportId, element);\n        setEnabledVPElement(element);\n\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\n        const toolGroupId = viewportInfo.getToolGroupId();\n        const syncGroups = viewportInfo.getSyncGroups();\n\n        toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\n\n        syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n        // we don't need reactivity here so just use state\n        const { synchronizersStore } = useSynchronizersStore.getState();\n        if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\n          // If the viewport used to have a synchronizer, re apply it again\n          _rehydrateSynchronizers(viewportId, syncGroupService);\n        }\n\n        if (onElementEnabled && typeof onElementEnabled === 'function') {\n          onElementEnabled(evt);\n        }\n      },\n      [viewportId, onElementEnabled, toolGroupService]\n    );\n\n    // disable the element upon unmounting\n    useEffect(() => {\n      cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\n\n      eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n\n      setImageScrollBarHeight();\n\n      return () => {\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        if (!viewportInfo) {\n          return;\n        }\n\n        cornerstoneViewportService.storePresentation({ viewportId });\n\n        // This should be done after the store presentation since synchronizers\n        // will get cleaned up and they need the viewportInfo to be present\n        cleanUpServices(viewportInfo);\n\n        if (onElementDisabled && typeof onElementDisabled === 'function') {\n          onElementDisabled(viewportInfo);\n        }\n\n        cornerstoneViewportService.disableElement(viewportId);\n        viewportRef.unregister();\n\n        eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n      };\n    }, []);\n\n    // subscribe to displaySet metadata invalidation (updates)\n    // Currently, if the metadata changes we need to re-render the display set\n    // for it to take effect in the viewport. As we deal with scaling in the loading,\n    // we need to remove the old volume from the cache, and let the\n    // viewport to re-add it which will use the new metadata. Otherwise, the\n    // viewport will use the cached volume and the new metadata will not be used.\n    // Note: this approach does not actually end of sending network requests\n    // and it uses the network cache\n    useEffect(() => {\n      const { unsubscribe } = displaySetService.subscribe(\n        displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n        async ({\n          displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\n          invalidateData,\n        }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\n          if (!invalidateData) {\n            return;\n          }\n\n          const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n          if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\n            const viewportData = viewportInfo.getViewportData();\n            const newViewportData = await cornerstoneCacheService.invalidateViewportData(\n              viewportData,\n              invalidatedDisplaySetInstanceUID,\n              dataSource,\n              displaySetService\n            );\n\n            const keepCamera = true;\n            cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\n          }\n        }\n      );\n      return () => {\n        unsubscribe();\n      };\n    }, [viewportId]);\n\n    useEffect(() => {\n      // handle the default viewportType to be stack\n      if (!viewportOptions.viewportType) {\n        viewportOptions.viewportType = STACK;\n      }\n\n      const loadViewportData = async () => {\n        const viewportData = await cornerstoneCacheService.createViewportData(\n          displaySets,\n          viewportOptions,\n          dataSource,\n          initialImageIndex\n        );\n\n        const presentations = getViewportPresentations(viewportId, viewportOptions);\n\n        // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\n        // Used for segmentation hydration right now, since the logic to decide whether\n        // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\n        // so we need to re-render (force update via change of the needsRerendering) so that React\n        // does the diffing and decides we should render this again (although the id and element has not changed)\n        // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\n        if (viewportOptions.needsRerendering) {\n          viewportOptions.needsRerendering = false;\n        }\n\n        cornerstoneViewportService.setViewportData(\n          viewportId,\n          viewportData,\n          viewportOptions,\n          displaySetOptions,\n          presentations\n        );\n      };\n\n      loadViewportData();\n    }, [viewportOptions, displaySets, dataSource]);\n\n    /**\n     * There are two scenarios for jump to click\n     * 1. Current viewports contain the displaySet that the annotation was drawn on\n     * 2. Current viewports don't contain the displaySet that the annotation was drawn on\n     * and we need to change the viewports displaySet for jumping.\n     * Since measurement_jump happens via events and listeners, the former case is handled\n     * by the measurement_jump direct callback, but the latter case is handled first by\n     * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\n     * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\n     */\n    useEffect(() => {\n      if (isJumpToMeasurementDisabled) {\n        return;\n      }\n\n      const { unsubscribe } = measurementService.subscribe(\n        MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\n        event => handleJumpToMeasurement(event, elementRef, viewportId, cornerstoneViewportService)\n      );\n\n      return () => {\n        unsubscribe();\n      };\n    }, [displaySets, elementRef, viewportId, isJumpToMeasurementDisabled, servicesManager]);\n\n    const Notification = customizationService.getCustomization('ui.notificationComponent');\n\n    return (\n      <React.Fragment>\n        <div className=\"viewport-wrapper\">\n          <div\n            className=\"cornerstone-viewport-element\"\n            style={{ height: '100%', width: '100%' }}\n            onContextMenu={e => e.preventDefault()}\n            onMouseDown={e => e.preventDefault()}\n            data-viewportid={viewportId}\n            ref={el => {\n              elementRef.current = el;\n              if (el) {\n                viewportRef.register(el);\n              }\n            }}\n          ></div>\n          <CornerstoneOverlays\n            viewportId={viewportId}\n            toolBarService={toolbarService}\n            element={elementRef.current}\n            scrollbarHeight={scrollbarHeight}\n            servicesManager={servicesManager}\n          />\n          <CinePlayer\n            enabledVPElement={enabledVPElement}\n            viewportId={viewportId}\n            servicesManager={servicesManager}\n          />\n          <ActiveViewportBehavior\n            viewportId={viewportId}\n            servicesManager={servicesManager}\n          />\n        </div>\n        {/* top offset of 24px to account for ViewportActionCorners. */}\n        <div className=\"absolute top-[24px] w-full\">\n          {viewportDialogState.viewportId === viewportId && (\n            <Notification\n              id=\"viewport-notification\"\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n              onKeyPress={viewportDialogState.onKeyPress}\n            />\n          )}\n        </div>\n        {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\n        <OHIFViewportActionCorners viewportId={viewportId} />\n      </React.Fragment>\n    );\n  },\n  areEqual\n);\n\n// Helper function to handle jumping to measurements\nfunction handleJumpToMeasurement(event, elementRef, viewportId, cornerstoneViewportService) {\n  const { measurement, isConsumed } = event;\n  if (!measurement || isConsumed) {\n    return;\n  }\n\n  const enabledElement = getEnabledElement(elementRef.current);\n\n  if (!enabledElement) {\n    return;\n  }\n\n  const viewport = enabledElement.viewport as csTypes.IStackViewport | csTypes.IVolumeViewport;\n\n  const { metadata, displaySetInstanceUID } = measurement;\n\n  const viewportDisplaySets = cornerstoneViewportService.getViewportDisplaySets(viewportId);\n\n  const showingDisplaySet = viewportDisplaySets.find(\n    ds => ds.displaySetInstanceUID === displaySetInstanceUID\n  );\n\n  let metadataToUse = metadata;\n  // if it is not showing the displaySet we need to remove the FOR from the metadata\n  if (!showingDisplaySet) {\n    metadataToUse = {\n      ...metadata,\n      FrameOfReferenceUID: undefined,\n    };\n  }\n\n  // Todo: make it work with cases where we want to define FOR based measurements too\n  if (!viewport.isReferenceViewable(metadataToUse, WITH_NAVIGATION)) {\n    return;\n  }\n\n  try {\n    viewport.setViewReference(metadata);\n    viewport.render();\n  } catch (e) {\n    console.warn('Unable to apply', metadata, e);\n  }\n\n  cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n  event?.consume?.();\n}\n\nfunction _rehydrateSynchronizers(viewportId: string, syncGroupService: any) {\n  const { synchronizersStore } = useSynchronizersStore.getState();\n  const synchronizers = synchronizersStore[viewportId];\n\n  if (!synchronizers) {\n    return;\n  }\n\n  synchronizers.forEach(synchronizerObj => {\n    if (!synchronizerObj.id) {\n      return;\n    }\n\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\n\n    const synchronizer = syncGroupService.getSynchronizer(id);\n\n    if (!synchronizer) {\n      return;\n    }\n\n    const sourceViewportInfo = sourceViewports.find(\n      sourceViewport => sourceViewport.viewportId === viewportId\n    );\n\n    const targetViewportInfo = targetViewports.find(\n      targetViewport => targetViewport.viewportId === viewportId\n    );\n\n    const isSourceViewportInSynchronizer = synchronizer\n      .getSourceViewports()\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\n\n    const isTargetViewportInSynchronizer = synchronizer\n      .getTargetViewports()\n      .find(targetViewport => targetViewport.viewportId === viewportId);\n\n    // if the viewport was previously a source viewport, add it again\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\n      synchronizer.addSource({\n        viewportId: sourceViewportInfo.viewportId,\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\n      });\n    }\n\n    // if the viewport was previously a target viewport, add it again\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\n      synchronizer.addTarget({\n        viewportId: targetViewportInfo.viewportId,\n        renderingEngineId: targetViewportInfo.renderingEngineId,\n      });\n    }\n  });\n}\n\n// Component displayName\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\n\nfunction areEqual(prevProps, nextProps) {\n  if (nextProps.needsRerendering) {\n    return false;\n  }\n\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\n    return false;\n  }\n\n  if (\n    nextProps.viewportOptions.viewportType &&\n    prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType\n  ) {\n    return false;\n  }\n\n  if (nextProps.viewportOptions.needsRerendering) {\n    return false;\n  }\n\n  const prevDisplaySets = prevProps.displaySets;\n  const nextDisplaySets = nextProps.displaySets;\n\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < prevDisplaySets.length; i++) {\n    const prevDisplaySet = prevDisplaySets[i];\n\n    const foundDisplaySet = nextDisplaySets.find(\n      nextDisplaySet =>\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\n    );\n\n    if (!foundDisplaySet) {\n      return false;\n    }\n\n    // check they contain the same image\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\n      return false;\n    }\n\n    // check if their imageIds are the same\n    if (foundDisplaySet.images?.length) {\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n// Helper function to check if display sets have changed\nfunction haveDisplaySetsChanged(prevDisplaySets, currentDisplaySets) {\n  if (prevDisplaySets.length !== currentDisplaySets.length) {\n    return true;\n  }\n\n  return currentDisplaySets.some((currentDS, index) => {\n    const prevDS = prevDisplaySets[index];\n    return currentDS.displaySetInstanceUID !== prevDS.displaySetInstanceUID;\n  });\n}\n\nexport default OHIFCornerstoneViewport;\n","import React, { useEffect, useState } from 'react';\n\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\n\nfunction CornerstoneOverlays(props: withAppTypes) {\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [imageSliceData, setImageSliceData] = useState({\n    imageIndex: 0,\n    numberOfSlices: 0,\n  });\n  const [viewportData, setViewportData] = useState(null);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n      props => {\n        if (props.viewportId !== viewportId) {\n          return;\n        }\n\n        setViewportData(props.viewportData);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  if (!element) {\n    return null;\n  }\n\n  if (viewportData) {\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"noselect\">\n      <ViewportImageScrollbar\n        viewportId={viewportId}\n        viewportData={viewportData}\n        element={element}\n        imageSliceData={imageSliceData}\n        setImageSliceData={setImageSliceData}\n        scrollbarHeight={scrollbarHeight}\n        servicesManager={servicesManager}\n      />\n\n      <CustomizableViewportOverlay\n        imageSliceData={imageSliceData}\n        viewportData={viewportData}\n        viewportId={viewportId}\n        servicesManager={servicesManager}\n        element={element}\n      />\n\n      <ViewportImageSliceLoadingIndicator\n        viewportData={viewportData}\n        element={element}\n      />\n\n      <ViewportOrientationMarkers\n        imageSliceData={imageSliceData}\n        element={element}\n        viewportData={viewportData}\n        servicesManager={servicesManager}\n        viewportId={viewportId}\n      />\n    </div>\n  );\n}\n\nexport default CornerstoneOverlays;\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./CustomizableViewportOverlay.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { vec3 } from 'gl-matrix';\nimport PropTypes from 'prop-types';\nimport { metaData, Enums, utilities, eventTarget } from '@cornerstonejs/core';\nimport { Enums as csToolsEnums, UltrasoundPleuraBLineTool } from '@cornerstonejs/tools';\nimport type { ImageSliceData } from '@cornerstonejs/core/types';\nimport { ViewportOverlay } from '@ohif/ui-next';\nimport type { InstanceMetadata } from '@ohif/core/src/types';\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\nimport { utils } from '@ohif/core';\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\n\nimport './CustomizableViewportOverlay.css';\nimport { useViewportRendering } from '../../hooks';\n\nconst EPSILON = 1e-4;\nconst { formatPN } = utils;\n\ntype ViewportData = StackViewportData | VolumeViewportData;\n\ninterface OverlayItemProps {\n  element: HTMLElement;\n  viewportData: ViewportData;\n  imageSliceData: ImageSliceData;\n  servicesManager: AppTypes.ServicesManager;\n  viewportId: string;\n  instance: InstanceMetadata;\n  customization: any;\n  formatters: {\n    formatPN: (val) => string;\n    formatDate: (val) => string;\n    formatTime: (val) => string;\n    formatNumberPrecision: (val, number) => string;\n  };\n\n  // calculated values\n  voi: {\n    windowWidth: number;\n    windowCenter: number;\n  };\n  instanceNumber?: number;\n  scale?: number;\n}\n\nconst OverlayItemComponents = {\n  'ohif.overlayItem': OverlayItem,\n  'ohif.overlayItem.windowLevel': VOIOverlayItem,\n  'ohif.overlayItem.zoomLevel': ZoomOverlayItem,\n  'ohif.overlayItem.instanceNumber': InstanceNumberOverlayItem,\n};\n\n/**\n * Customizable Viewport Overlay\n */\nfunction CustomizableViewportOverlay({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n}: {\n  element: HTMLElement;\n  viewportData: ViewportData;\n  imageSliceData: ImageSliceData;\n  viewportId: string;\n  servicesManager: AppTypes.ServicesManager;\n}) {\n  const { cornerstoneViewportService, customizationService, toolGroupService, displaySetService } =\n    servicesManager.services;\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\n  const [scale, setScale] = useState(1);\n  const [annotationState, setAnnotationState] = useState(0);\n  const { isViewportBackgroundLight: isLight } = useViewportRendering(viewportId);\n  const { imageIndex } = imageSliceData;\n\n  // Historical usage defined the overlays as separate items due to lack of\n  // append functionality.  This code enables the historical usage, but\n  // the recommended functionality is to append to the default values in\n  // cornerstoneOverlay rather than defining individual items.\n  const topLeftCustomization = customizationService.getCustomization('viewportOverlay.topLeft');\n  const topRightCustomization = customizationService.getCustomization('viewportOverlay.topRight');\n  const bottomLeftCustomization = customizationService.getCustomization(\n    'viewportOverlay.bottomLeft'\n  );\n  const bottomRightCustomization = customizationService.getCustomization(\n    'viewportOverlay.bottomRight'\n  );\n\n  const instanceNumber = useMemo(\n    () =>\n      viewportData\n        ? getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService)\n        : null,\n    [viewportData, viewportId, imageIndex, cornerstoneViewportService]\n  );\n\n  const displaySetProps = useMemo(() => {\n    const displaySets = getDisplaySets(viewportData, displaySetService);\n    if (!displaySets) {\n      return null;\n    }\n    const [displaySet] = displaySets;\n    const { instances, instance: referenceInstance } = displaySet;\n    return {\n      displaySets,\n      displaySet,\n      instance: instances?.[imageIndex],\n      instances,\n      referenceInstance,\n    };\n  }, [viewportData, viewportId, instanceNumber, cornerstoneViewportService]);\n\n  /**\n   * Updating the VOI when the viewport changes its voi\n   */\n  useEffect(() => {\n    const updateVOI = eventDetail => {\n      const { range } = eventDetail.detail;\n\n      if (!range) {\n        return;\n      }\n\n      const { lower, upper } = range;\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n\n      setVOI({ windowCenter, windowWidth });\n    };\n\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n    };\n  }, [viewportId, viewportData, voi, element]);\n\n  const annotationModified = useCallback(evt => {\n    if (evt.detail.annotation.metadata.toolName === UltrasoundPleuraBLineTool.toolName) {\n      // Update the annotation state to trigger a re-render\n      setAnnotationState(prevState => prevState + 1);\n    }\n  }, []);\n\n  useEffect(() => {\n    eventTarget.addEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\n\n    return () => {\n      eventTarget.removeEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\n    };\n  }, [annotationModified]);\n  /**\n   * Updating the scale when the viewport changes its zoom\n   */\n  useEffect(() => {\n    const updateScale = eventDetail => {\n      const { previousCamera, camera } = eventDetail.detail;\n\n      if (\n        previousCamera.parallelScale !== camera.parallelScale ||\n        previousCamera.scale !== camera.scale\n      ) {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return;\n        }\n\n        const scale = viewport.getZoom();\n\n        setScale(scale);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\n    };\n  }, [viewportId, viewportData, cornerstoneViewportService, element]);\n\n  const _renderOverlayItem = useCallback(\n    (item, props) => {\n      const overlayItemProps = {\n        ...props,\n        element,\n        viewportData,\n        imageSliceData,\n        viewportId,\n        servicesManager,\n        customization: item,\n        isLight,\n        formatters: {\n          formatPN,\n          formatDate: formatDICOMDate,\n          formatTime: formatDICOMTime,\n          formatNumberPrecision,\n        },\n      };\n\n      if (!item) {\n        return null;\n      }\n\n      const { inheritsFrom } = item;\n      const OverlayItemComponent = OverlayItemComponents[inheritsFrom];\n\n      if (OverlayItemComponent) {\n        return <OverlayItemComponent {...overlayItemProps} />;\n      } else {\n        const renderItem = customizationService.transform(item);\n\n        if (typeof renderItem.contentF === 'function') {\n          return renderItem.contentF(overlayItemProps);\n        }\n      }\n    },\n    [\n      element,\n      viewportData,\n      imageSliceData,\n      viewportId,\n      servicesManager,\n      customizationService,\n      displaySetProps,\n      voi,\n      scale,\n      instanceNumber,\n      annotationState,\n    ]\n  );\n\n  const getContent = useCallback(\n    (customization, keyPrefix) => {\n      const props = {\n        ...displaySetProps,\n        formatters: { formatDate: formatDICOMDate },\n        voi,\n        scale,\n        instanceNumber,\n        viewportId,\n        toolGroupService,\n        isLight,\n      };\n\n      return (\n        <>\n          {customization.map((item, index) => (\n            <div key={`${keyPrefix}_${index}`}>\n              {((!item?.condition || item.condition(props)) && _renderOverlayItem(item, props)) ||\n                null}\n            </div>\n          ))}\n        </>\n      );\n    },\n    [_renderOverlayItem]\n  );\n\n  return (\n    <ViewportOverlay\n      topLeft={getContent(topLeftCustomization, 'topLeftOverlayItem')}\n      topRight={getContent(topRightCustomization, 'topRightOverlayItem')}\n      bottomLeft={getContent(bottomLeftCustomization, 'bottomLeftOverlayItem')}\n      bottomRight={getContent(bottomRightCustomization, 'bottomRightOverlayItem')}\n      color={isLight ? 'text-neutral-dark' : 'text-neutral-light'}\n      shadowClass={isLight ? 'shadow-light' : 'shadow-dark'}\n    />\n  );\n}\n\n/**\n * Gets an array of display sets for the given viewport, based on the viewport data.\n * Returns null if none found.\n */\nfunction getDisplaySets(viewportData, displaySetService) {\n  if (!viewportData?.data?.length) {\n    return null;\n  }\n  const displaySets = viewportData.data\n    .map(datum => displaySetService.getDisplaySetByUID(datum.displaySetInstanceUID))\n    .filter(it => !!it);\n  if (!displaySets.length) {\n    return null;\n  }\n  return displaySets;\n}\n\nconst getInstanceNumber = (viewportData, viewportId, imageIndex, cornerstoneViewportService) => {\n  let instanceNumber;\n\n  switch (viewportData.viewportType) {\n    case Enums.ViewportType.STACK:\n      instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\n      break;\n    case Enums.ViewportType.ORTHOGRAPHIC:\n      instanceNumber = _getInstanceNumberFromVolume(\n        viewportData,\n        viewportId,\n        cornerstoneViewportService,\n        imageIndex\n      );\n      break;\n  }\n\n  return instanceNumber ?? null;\n};\n\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\n  const imageIds = viewportData.data[0].imageIds;\n  const imageId = imageIds[imageIndex];\n\n  if (!imageId) {\n    return;\n  }\n\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\n  const { instanceNumber } = generalImageModule;\n\n  const stackSize = imageIds.length;\n\n  if (stackSize <= 1) {\n    return;\n  }\n\n  return parseInt(instanceNumber);\n}\n\n// Since volume viewports can be in any view direction, they can render\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\nfunction _getInstanceNumberFromVolume(\n  viewportData,\n  viewportId,\n  cornerstoneViewportService,\n  imageIndex\n) {\n  const volumes = viewportData.data;\n\n  if (!volumes) {\n    return;\n  }\n\n  // Todo: support fusion of acquisition plane which has instanceNumber\n  const { volume } = volumes[0];\n\n  if (!volume) {\n    return;\n  }\n\n  const { direction, imageIds } = volume;\n\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  if (!cornerstoneViewport) {\n    return;\n  }\n\n  const camera = cornerstoneViewport.getCamera();\n  const { viewPlaneNormal } = camera;\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\n\n  const scanAxisNormal = direction.slice(6, 9);\n\n  // check if viewPlaneNormal is parallel to scanAxisNormal\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\n\n  if (isAcquisitionPlane) {\n    const imageId = imageIds[imageIndex];\n\n    if (!imageId) {\n      return {};\n    }\n\n    const { instanceNumber } = metaData.get('generalImageModule', imageId) || {};\n    return parseInt(instanceNumber);\n  }\n}\n\nfunction OverlayItem(props) {\n  const { instance, customization = {} } = props;\n  const { color, attribute, title, label, background } = customization;\n  const value = customization.contentF?.(props, customization) ?? instance?.[attribute];\n  if (value === undefined || value === null) {\n    return null;\n  }\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color, background }}\n      title={title}\n    >\n      {label ? <span className=\"mr-1 shrink-0\">{label}</span> : null}\n      <span className=\"ml-0 mr-2 shrink-0\">{value}</span>\n    </div>\n  );\n}\n\n/**\n * Window Level / Center Overlay item\n * //\n */\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\n  const { windowWidth, windowCenter } = voi;\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: customization?.color }}\n    >\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">W:</span>\n      <span className=\"mr-2.5 shrink-0\">{windowWidth.toFixed(0)}</span>\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">L:</span>\n      <span className=\"shrink-0\">{windowCenter.toFixed(0)}</span>\n    </div>\n  );\n}\n\n/**\n * Zoom Level Overlay item\n */\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: (customization && customization.color) || undefined }}\n    >\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">Zoom:</span>\n      <span>{scale.toFixed(2)}x</span>\n    </div>\n  );\n}\n\n/**\n * Instance Number Overlay Item\n */\nfunction InstanceNumberOverlayItem({\n  instanceNumber,\n  imageSliceData,\n  customization,\n}: OverlayItemProps) {\n  const { imageIndex, numberOfSlices } = imageSliceData;\n\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: (customization && customization.color) || undefined }}\n    >\n      <span>\n        {instanceNumber !== undefined && instanceNumber !== null ? (\n          <>\n            <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">I:</span>\n            <span>{`${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`}</span>\n          </>\n        ) : (\n          `${imageIndex + 1}/${numberOfSlices}`\n        )}\n      </span>\n    </div>\n  );\n}\n\nCustomizableViewportOverlay.propTypes = {\n  viewportData: PropTypes.object,\n  imageIndex: PropTypes.number,\n  viewportId: PropTypes.string,\n};\n\nexport default CustomizableViewportOverlay;\n\nexport { CustomizableViewportOverlay };\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums, VolumeViewport3D, utilities as csUtils } from '@cornerstonejs/core';\nimport { ImageScrollbar } from '@ohif/ui-next';\n\nfunction CornerstoneImageScrollbar({\n  viewportData,\n  viewportId,\n  element,\n  imageSliceData,\n  setImageSliceData,\n  scrollbarHeight,\n  servicesManager,\n}: withAppTypes<{\n  element: HTMLElement;\n}>) {\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\n\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    const { isCineEnabled } = cineService.getState();\n\n    if (isCineEnabled) {\n      // on image scrollbar change, stop the CINE if it is playing\n      cineService.stopClip(element, { viewportId });\n      cineService.setCine({ id: viewportId, isPlaying: false });\n    }\n\n    csUtils.jumpToSlice(viewport.element, {\n      imageIndex,\n      debounceLoading: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!viewportData) {\n      return;\n    }\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    if (!viewport || viewport instanceof VolumeViewport3D) {\n      return;\n    }\n\n    try {\n      const imageIndex = viewport.getCurrentImageIdIndex();\n      const numberOfSlices = viewport.getNumberOfSlices();\n\n      setImageSliceData({\n        imageIndex: imageIndex,\n        numberOfSlices,\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }, [viewportId, viewportData]);\n\n  useEffect(() => {\n    if (!viewportData) {\n      return;\n    }\n    const { viewportType } = viewportData;\n    const eventId =\n      (viewportType === Enums.ViewportType.STACK && Enums.Events.STACK_NEW_IMAGE) ||\n      (viewportType === Enums.ViewportType.ORTHOGRAPHIC && Enums.Events.VOLUME_NEW_IMAGE) ||\n      Enums.Events.IMAGE_RENDERED;\n\n    const updateIndex = event => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (!viewport || viewport instanceof VolumeViewport3D) {\n        return;\n      }\n      const { imageIndex, newImageIdIndex = imageIndex, imageIdIndex } = event.detail;\n      const numberOfSlices = viewport.getNumberOfSlices();\n      // find the index of imageId in the imageIds\n      setImageSliceData({\n        imageIndex: newImageIdIndex ?? imageIdIndex,\n        numberOfSlices,\n      });\n    };\n\n    element.addEventListener(eventId, updateIndex);\n\n    return () => {\n      element.removeEventListener(eventId, updateIndex);\n    };\n  }, [viewportData, element]);\n\n  return (\n    <ImageScrollbar\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\n      height={scrollbarHeight}\n      value={imageSliceData.imageIndex || 0}\n    />\n  );\n}\n\nCornerstoneImageScrollbar.propTypes = {\n  viewportData: PropTypes.object,\n  viewportId: PropTypes.string.isRequired,\n  element: PropTypes.instanceOf(Element),\n  scrollbarHeight: PropTypes.string,\n  imageSliceData: PropTypes.object.isRequired,\n  setImageSliceData: PropTypes.func.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default CornerstoneImageScrollbar;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums } from '@cornerstonejs/core';\n\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadIndicatorRef = useRef(null);\n  const imageIdToBeLoaded = useRef(null);\n\n  const setLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    loadIndicatorRef.current = setTimeout(() => {\n      setLoading(true);\n    }, 50);\n  };\n\n  const setFinishLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    setLoading(false);\n  };\n\n  const setErrorState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\n      setError(evt.detail.error);\n      imageIdToBeLoaded.current = null;\n    }\n  };\n\n  useEffect(() => {\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    };\n  }, [element, viewportData]);\n\n  if (error) {\n    return (\n      <>\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\n            <p className=\"text-primary-light text-xl font-light\">\n              <h4>Error Loading Image</h4>\n              <p>An error has occurred.</p>\n              <p>{error}</p>\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (loading) {\n    return (\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nViewportImageSliceLoadingIndicator.propTypes = {\n  error: PropTypes.object,\n  element: PropTypes.object,\n};\n\nexport default ViewportImageSliceLoadingIndicator;\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./ViewportOrientationMarkers.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport {\n  metaData,\n  Enums,\n  Types,\n  getEnabledElement,\n  utilities as coreUtilities,\n} from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport { vec3 } from 'gl-matrix';\n\nimport './ViewportOrientationMarkers.css';\nimport { useViewportRendering } from '../../hooks';\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\n\nfunction ViewportOrientationMarkers({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n  orientationMarkers = ['top', 'left'],\n}: withAppTypes) {\n  // Rotation is in degrees\n  const [rotation, setRotation] = useState(0);\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\n  const [flipVertical, setFlipVertical] = useState(false);\n  const { isViewportBackgroundLight: isLight } = useViewportRendering(viewportId);\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  // Store initial viewUp and viewRight for volume viewports\n  const initialVolumeOrientationRef = useRef<{\n    initialViewUp: number[] | null;\n    initialViewRight: number[] | null;\n  }>({\n    initialViewUp: null,\n    initialViewRight: null,\n  });\n\n  useEffect(() => {\n    initialVolumeOrientationRef.current.initialViewUp = null;\n    initialVolumeOrientationRef.current.initialViewRight = null;\n\n    if (viewportData?.viewportType !== 'stack' && element && getEnabledElement(element)) {\n      const { viewport } = getEnabledElement(element);\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n      const viewRight = vec3.create();\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n      initialVolumeOrientationRef.current.initialViewUp = [...viewUp];\n      initialVolumeOrientationRef.current.initialViewRight = [...viewRight];\n    }\n  }, [element, viewportData]);\n\n  useEffect(() => {\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\n      const { previousCamera, camera } = evt.detail;\n\n      const { rotation } = camera;\n      if (rotation !== undefined) {\n        setRotation(rotation);\n      }\n\n      if (\n        camera.flipHorizontal !== undefined &&\n        previousCamera.flipHorizontal !== camera.flipHorizontal\n      ) {\n        setFlipHorizontal(camera.flipHorizontal);\n      }\n\n      if (\n        camera.flipVertical !== undefined &&\n        previousCamera.flipVertical !== camera.flipVertical\n      ) {\n        setFlipVertical(camera.flipVertical);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n    };\n  }, []);\n\n  const markers = useMemo(() => {\n    if (!viewportData) {\n      return '';\n    }\n\n    let rowCosines, columnCosines, isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine;\n    if (viewportData.viewportType === 'stack') {\n      const imageIndex = imageSliceData.imageIndex;\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\n\n      // Workaround for below TODO stub\n      if (!imageId) {\n        return false;\n      }\n\n      ({\n        rowCosines,\n        columnCosines,\n        isDefaultValueSetForColumnCosine,\n        isDefaultValueSetForColumnCosine,\n      } = metaData.get('imagePlaneModule', imageId) || {});\n    } else {\n      if (!element || !getEnabledElement(element)) {\n        return '';\n      }\n\n      if (\n        initialVolumeOrientationRef.current.initialViewUp &&\n        initialVolumeOrientationRef.current.initialViewRight\n      ) {\n        // Use initial orientation values for consistency, even as the camera changes\n        columnCosines = [\n          -initialVolumeOrientationRef.current.initialViewUp[0],\n          -initialVolumeOrientationRef.current.initialViewUp[1],\n          -initialVolumeOrientationRef.current.initialViewUp[2],\n        ];\n        rowCosines = initialVolumeOrientationRef.current.initialViewRight;\n      } else {\n        console.warn('ViewportOrientationMarkers::No initial orientation values');\n        return '';\n      }\n    }\n\n    if (\n      !rowCosines ||\n      !columnCosines ||\n      rotation === undefined ||\n      isDefaultValueSetForRowCosine ||\n      isDefaultValueSetForColumnCosine\n    ) {\n      return '';\n    }\n\n    const markers = _getOrientationMarkers(\n      rowCosines,\n      columnCosines,\n      rotation,\n      flipVertical,\n      flipHorizontal\n    );\n\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (!ohifViewport) {\n      console.log('ViewportOrientationMarkers::No viewport');\n      return null;\n    }\n\n    return orientationMarkers.map((m, index) => (\n      <div\n        className={classNames(\n          'overlay-text',\n          `${m}-mid orientation-marker`,\n          isLight ? 'text-neutral-dark/70' : 'text-neutral-light/70',\n          isLight ? 'shadow-light' : 'shadow-dark',\n          'text-base',\n          'leading-5'\n        )}\n        key={`${m}-mid orientation-marker`}\n      >\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\n      </div>\n    ));\n  }, [\n    viewportData,\n    imageSliceData,\n    rotation,\n    flipVertical,\n    flipHorizontal,\n    orientationMarkers,\n    element,\n    isLight,\n  ]);\n\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\n}\n\n/**\n *\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\n *\n * @param {*} rowCosines\n * @param {*} columnCosines\n * @param {*} rotation in degrees\n * @returns\n */\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\n  const rowString = getOrientationStringLPS(rowCosines);\n  const columnString = getOrientationStringLPS(columnCosines);\n  const oppositeRowString = invertOrientationStringLPS(rowString);\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\n\n  const markers = {\n    top: oppositeColumnString,\n    left: oppositeRowString,\n    right: rowString,\n    bottom: columnString,\n  };\n\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\n  // the rotation applications\n  if (flipVertical) {\n    markers.top = invertOrientationStringLPS(markers.top);\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\n  }\n\n  if (flipHorizontal) {\n    markers.left = invertOrientationStringLPS(markers.left);\n    markers.right = invertOrientationStringLPS(markers.right);\n  }\n\n  // Swap the labels accordingly if the viewport has been rotated\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\n  if (rotation === 90 || rotation === -270) {\n    return {\n      top: markers.left,\n      left: invertOrientationStringLPS(markers.top),\n      right: invertOrientationStringLPS(markers.bottom),\n      bottom: markers.right, // left\n    };\n  } else if (rotation === -90 || rotation === 270) {\n    return {\n      top: invertOrientationStringLPS(markers.left),\n      left: markers.top,\n      bottom: markers.left,\n      right: markers.bottom,\n    };\n  } else if (rotation === 180 || rotation === -180) {\n    return {\n      top: invertOrientationStringLPS(markers.top),\n      left: invertOrientationStringLPS(markers.left),\n      bottom: invertOrientationStringLPS(markers.bottom),\n      right: invertOrientationStringLPS(markers.right),\n    };\n  }\n\n  return markers;\n}\n\nexport default ViewportOrientationMarkers;\n","import moment from 'moment';\nimport { metaData } from '@cornerstonejs/core';\n\n/**\n * Checks if value is valid.\n *\n * @param {number} value\n * @returns {boolean} is valid.\n */\nexport function isValidNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Formats number precision.\n *\n * @param {number} number\n * @param {number} precision\n * @returns {number} formatted number.\n */\nexport function formatNumberPrecision(number, precision = 0) {\n  if (number !== null) {\n    return parseFloat(number).toFixed(precision);\n  }\n}\n\n/**\n * Formats DICOM date.\n *\n * @param {string} date\n * @param {string} strFormat\n * @returns {string} formatted date.\n */\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\n  return moment(date, 'YYYYMMDD').format(strFormat);\n}\n\n/**\n *    DICOM Time is stored as HHmmss.SSS, where:\n *      HH 24 hour time:\n *        m mm        0..59   Minutes\n *        s ss        0..59   Seconds\n *        S SS SSS    0..999  Fractional seconds\n *\n *        Goal: '24:12:12'\n *\n * @param {*} time\n * @param {string} strFormat\n * @returns {string} formatted name.\n */\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\n  return moment(time, 'HH:mm:ss').format(strFormat);\n}\n\n/**\n * Gets compression type\n *\n * @param {number} imageId\n * @returns {string} compression type.\n */\nexport function getCompression(imageId) {\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\n    generalImageModule;\n\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\n    return compressionMethod + compressionRatio + ' : 1';\n  }\n\n  return 'Lossless / Uncompressed';\n}\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { useCine } from '@ohif/ui-next';\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\nimport { useAppConfig } from '@state';\n\nfunction WrappedCinePlayer({\n  enabledVPElement,\n  viewportId,\n  servicesManager,\n}: withAppTypes<{\n  enabledVPElement: HTMLElement;\n  viewportId: string;\n}>) {\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\n  const [{ isCineEnabled, cines }, cineService] = useCine();\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\n  const [dynamicInfo, setDynamicInfo] = useState(null);\n  const [appConfig] = useAppConfig();\n  const isMountedRef = useRef(null);\n\n  const cineHandler = () => {\n    if (!cines?.[viewportId] || !enabledVPElement) {\n      return;\n    }\n\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\n    const validFrameRate = Math.max(frameRate, 1);\n\n    return isPlaying\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\n      : cineService.stopClip(enabledVPElement);\n  };\n\n  const newDisplaySetHandler = useCallback(() => {\n    if (!enabledVPElement || !isCineEnabled) {\n      return;\n    }\n\n    const { viewports } = viewportGridService.getState();\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\n    let frameRate = 24;\n    let isPlaying = cines[viewportId]?.isPlaying || false;\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (displaySet.FrameRate) {\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\n        // So a bit of math to get the actual frame rate.\n        frameRate = Math.round(1000 / displaySet.FrameRate);\n        isPlaying ||= !!appConfig.autoPlayCine;\n      }\n\n      // check if the displaySet is dynamic and set the dynamic info\n      if (displaySet.isDynamicVolume) {\n        const { dynamicVolumeInfo } = displaySet;\n        const numDimensionGroups = dynamicVolumeInfo.timePoints.length;\n        const label = dynamicVolumeInfo.splittingTag;\n        const dimensionGroupNumber = dynamicVolumeInfo.dimensionGroupNumber || 1;\n        setDynamicInfo({\n          volumeId: displaySet.displaySetInstanceUID,\n          dimensionGroupNumber,\n          numDimensionGroups,\n          label,\n        });\n      } else {\n        setDynamicInfo(null);\n      }\n    });\n\n    if (isPlaying) {\n      cineService.setIsCineEnabled(isPlaying);\n    }\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\n    setNewStackFrameRate(frameRate);\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\n\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    newDisplaySetHandler();\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, [isCineEnabled, newDisplaySetHandler]);\n\n  useEffect(() => {\n    if (!isCineEnabled) {\n      return;\n    }\n\n    cineHandler();\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\n\n  /**\n   * Use effect for handling new display set\n   */\n  useEffect(() => {\n    if (!enabledVPElement) {\n      return;\n    }\n\n    enabledVPElement.addEventListener(Enums.Events.VIEWPORT_NEW_IMAGE_SET, newDisplaySetHandler);\n    // this doesn't makes sense that we are listening to this event on viewport element\n    enabledVPElement.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      newDisplaySetHandler\n    );\n\n    return () => {\n      cineService.setCine({ id: viewportId, isPlaying: false });\n\n      enabledVPElement.removeEventListener(\n        Enums.Events.VIEWPORT_NEW_IMAGE_SET,\n        newDisplaySetHandler\n      );\n      enabledVPElement.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        newDisplaySetHandler\n      );\n    };\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\n\n  useEffect(() => {\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\n      return;\n    }\n\n    cineHandler();\n\n    return () => {\n      cineService.stopClip(enabledVPElement, { viewportId });\n    };\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\n\n  if (!isCineEnabled) {\n    return null;\n  }\n\n  const cine = cines[viewportId];\n  const isPlaying = cine?.isPlaying || false;\n\n  return (\n    <RenderCinePlayer\n      viewportId={viewportId}\n      cineService={cineService}\n      newStackFrameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      dynamicInfo={dynamicInfo}\n      customizationService={customizationService}\n    />\n  );\n}\n\nfunction RenderCinePlayer({\n  viewportId,\n  cineService,\n  newStackFrameRate,\n  isPlaying,\n  dynamicInfo: dynamicInfoProp,\n  customizationService,\n}) {\n  const CinePlayerComponent = customizationService.getCustomization('cinePlayer');\n\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\n\n  useEffect(() => {\n    setDynamicInfo(dynamicInfoProp);\n  }, [dynamicInfoProp]);\n\n  /**\n   * Use effect for handling 4D time index changed\n   */\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const handleDimensionGroupChange = evt => {\n      const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = evt.detail;\n      setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\n    };\n\n    eventTarget.addEventListener(\n      Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\n      handleDimensionGroupChange\n    );\n\n    return () => {\n      eventTarget.removeEventListener(\n        Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\n        handleDimensionGroupChange\n      );\n    };\n  }, [dynamicInfo]);\n\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = dynamicInfo || {};\n    const volume = cache.getVolume(volumeId, true);\n    volume.dimensionGroupNumber = dimensionGroupNumber;\n\n    setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\n  }, []);\n\n  const updateDynamicInfo = useCallback(props => {\n    const { volumeId, dimensionGroupNumber } = props;\n    const volume = cache.getVolume(volumeId, true);\n    volume.dimensionGroupNumber = dimensionGroupNumber;\n  }, []);\n\n  return (\n    <CinePlayerComponent\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\n      frameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      onClose={() => {\n        // also stop the clip\n        cineService.setCine({\n          id: viewportId,\n          isPlaying: false,\n        });\n        cineService.setIsCineEnabled(false);\n        cineService.setViewportCineClosed(viewportId);\n      }}\n      onPlayPauseChange={isPlaying => {\n        cineService.setCine({\n          id: viewportId,\n          isPlaying,\n        });\n      }}\n      onFrameRateChange={frameRate =>\n        cineService.setCine({\n          id: viewportId,\n          frameRate,\n        })\n      }\n      dynamicInfo={dynamicInfo}\n      updateDynamicInfo={updateDynamicInfo}\n    />\n  );\n}\n\nexport default WrappedCinePlayer;","import CinePlayer from './CinePlayer';\n\nexport default CinePlayer;\n","import React, { memo } from 'react';\nimport { ViewportActionCorners, IconPresentationProvider, ToolButton } from '@ohif/ui-next';\nimport { Toolbar } from '@ohif/extension-default/src/Toolbar/Toolbar';\nimport { ButtonLocation } from '@ohif/core/src/services/ToolBarService/ToolbarService';\nimport { useViewportHover } from '../hooks';\n\nexport type OHIFViewportActionCornersProps = {\n  viewportId: string;\n};\n\nfunction OHIFViewportActionCornersComponent({ viewportId }: OHIFViewportActionCornersProps) {\n  // Use the viewport hover hook to track if viewport is hovered or active\n  const { isHovered, isActive } = useViewportHover(viewportId);\n\n  const shouldShowCorners = isHovered || isActive;\n\n  if (!shouldShowCorners) {\n    return null;\n  }\n\n  return (\n    <IconPresentationProvider\n      size=\"medium\"\n      IconContainer={ToolButton}\n      containerProps={{\n        size: 'tiny',\n        className: 'font-normal text-primary hover:bg-primary/25',\n      }}\n    >\n      <ViewportActionCorners.Container>\n        <ViewportActionCorners.TopLeft>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.topLeft\"\n            viewportId={viewportId}\n            location={ButtonLocation.TopLeft}\n          />\n        </ViewportActionCorners.TopLeft>\n        <ViewportActionCorners.TopMiddle>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.topMiddle\"\n            viewportId={viewportId}\n            location={ButtonLocation.TopMiddle}\n          />\n        </ViewportActionCorners.TopMiddle>\n        <ViewportActionCorners.TopRight>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.topRight\"\n            viewportId={viewportId}\n            location={ButtonLocation.TopRight}\n          />\n        </ViewportActionCorners.TopRight>\n        <ViewportActionCorners.LeftMiddle>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.leftMiddle\"\n            viewportId={viewportId}\n            location={ButtonLocation.LeftMiddle}\n          />\n        </ViewportActionCorners.LeftMiddle>\n        <ViewportActionCorners.RightMiddle>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.rightMiddle\"\n            viewportId={viewportId}\n            location={ButtonLocation.RightMiddle}\n          />\n        </ViewportActionCorners.RightMiddle>\n        <ViewportActionCorners.BottomLeft>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.bottomLeft\"\n            viewportId={viewportId}\n            location={ButtonLocation.BottomLeft}\n          />\n        </ViewportActionCorners.BottomLeft>\n        <ViewportActionCorners.BottomMiddle>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.bottomMiddle\"\n            viewportId={viewportId}\n            location={ButtonLocation.BottomMiddle}\n          />\n        </ViewportActionCorners.BottomMiddle>\n        <ViewportActionCorners.BottomRight>\n          <Toolbar\n            buttonSection=\"viewportActionMenu.bottomRight\"\n            viewportId={viewportId}\n            location={ButtonLocation.BottomRight}\n          />\n        </ViewportActionCorners.BottomRight>\n      </ViewportActionCorners.Container>\n    </IconPresentationProvider>\n  );\n}\n\nconst OHIFViewportActionCorners = memo(OHIFViewportActionCornersComponent);\n\nexport default OHIFViewportActionCorners;\n","import { useEffect, useState, memo, useCallback } from 'react';\n\nconst ActiveViewportBehavior = memo(\n  ({ servicesManager, viewportId }: withAppTypes<{ viewportId: string }>) => {\n    const {\n      displaySetService,\n      cineService,\n      viewportGridService,\n      customizationService,\n      cornerstoneViewportService,\n    } = servicesManager.services;\n\n    const [activeViewportId, setActiveViewportId] = useState(viewportId);\n\n    const handleCineEnable = useCallback(() => {\n      if (cineService.isViewportCineClosed(activeViewportId)) {\n        return;\n      }\n\n      const displaySetInstanceUIDs =\n        viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\n\n      if (!displaySetInstanceUIDs) {\n        return;\n      }\n\n      const displaySets = displaySetInstanceUIDs.map(uid =>\n        displaySetService.getDisplaySetByUID(uid)\n      );\n\n      if (!displaySets.length) {\n        return;\n      }\n\n      const modalities = displaySets.map(displaySet => displaySet?.Modality);\n      const isDynamicVolume = displaySets.some(displaySet => displaySet?.isDynamicVolume);\n\n      const sourceModalities = customizationService.getCustomization('autoCineModalities');\n\n      const requiresCine = modalities.some(modality => sourceModalities.includes(modality));\n\n      if ((requiresCine || isDynamicVolume) && !cineService.getState().isCineEnabled) {\n        cineService.setIsCineEnabled(true);\n      }\n    }, [\n      activeViewportId,\n      cineService,\n      viewportGridService,\n      displaySetService,\n      customizationService,\n    ]);\n\n    useEffect(() => {\n      const subscription = viewportGridService.subscribe(\n        viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\n        ({ viewportId }) => setActiveViewportId(viewportId)\n      );\n\n      return () => subscription.unsubscribe();\n    }, [viewportId, viewportGridService]);\n\n    useEffect(() => {\n      const subscription = cornerstoneViewportService.subscribe(\n        cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n        () => {\n          const activeViewportId = viewportGridService.getActiveViewportId();\n          setActiveViewportId(activeViewportId);\n          handleCineEnable();\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }, [viewportId, cornerstoneViewportService, viewportGridService, handleCineEnable]);\n\n    useEffect(() => {\n      handleCineEnable();\n    }, [handleCineEnable]);\n\n    return null;\n  },\n  arePropsEqual\n);\n\nActiveViewportBehavior.displayName = 'ActiveViewportBehavior';\n\nfunction arePropsEqual(prevProps, nextProps) {\n  return (\n    prevProps.viewportId === nextProps.viewportId &&\n    prevProps.servicesManager === nextProps.servicesManager\n  );\n}\n\nexport default ActiveViewportBehavior;\n","import { usePositionPresentationStore } from '../../stores/usePositionPresentationStore';\nimport { useLutPresentationStore } from '../../stores/useLutPresentationStore';\nimport { useSegmentationPresentationStore } from '../../stores/useSegmentationPresentationStore';\n\nexport function getViewportPresentations(\n  viewportId: string,\n  viewportOptions: AppTypes.ViewportGrid.GridViewportOptions\n) {\n  const { lutPresentationStore } = useLutPresentationStore.getState();\n  const { positionPresentationStore } = usePositionPresentationStore.getState();\n  const { segmentationPresentationStore } = useSegmentationPresentationStore.getState();\n\n  // NOTE: this is the new viewport state, we should not get the presentationIds from the cornerstoneViewportService\n  // since that has the old viewport state\n  const { presentationIds } = viewportOptions;\n\n  if (!presentationIds) {\n    return {\n      positionPresentation: null,\n      lutPresentation: null,\n      segmentationPresentation: null,\n    };\n  }\n\n  const { lutPresentationId, positionPresentationId, segmentationPresentationId } = presentationIds;\n\n  const positionPresentation = positionPresentationStore[positionPresentationId];\n  const lutPresentation = lutPresentationStore[lutPresentationId];\n  const segmentationPresentation = segmentationPresentationStore[segmentationPresentationId];\n\n  return {\n    positionPresentation,\n    lutPresentation,\n    segmentationPresentation,\n  };\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.viewport-wrapper {\n  width: 100%;\n  height: 100%; /* MUST have \\`height\\` to prevent resize infinite loop */\n  position: relative;\n  /* Prevent text selection on the entire viewport wrapper */\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n.cornerstone-viewport-element {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: black;\n\n  /* Prevent the blue outline in Chrome when a viewport is selected */\n  outline: 0 !important;\n\n  /* Prevents the entire page from getting larger\n     when the magnify tool is near the sides/corners of the page */\n  overflow: hidden;\n  \n  /* Prevent text selection on the viewport element */\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n/* Prevent text selection on overlay elements */\n\n.noselect {\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n/* Ensure all elements within viewport wrapper prevent text selection */\n\n.viewport-wrapper * {\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,WAAW;EACX,YAAY,EAAE,uDAAuD;EACrE,kBAAkB;EAClB,0DAA0D;EAC1D,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,mEAAmE;EACnE,qBAAqB;;EAErB;kEACgE;EAChE,gBAAgB;;EAEhB,mDAAmD;EACnD,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA,+CAA+C;;AAC/C;EACE,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA,uEAAuE;;AACvE;EACE,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;AACvB\",\"sourcesContent\":[\".viewport-wrapper {\\n  width: 100%;\\n  height: 100%; /* MUST have `height` to prevent resize infinite loop */\\n  position: relative;\\n  /* Prevent text selection on the entire viewport wrapper */\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\\n.cornerstone-viewport-element {\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  background-color: black;\\n\\n  /* Prevent the blue outline in Chrome when a viewport is selected */\\n  outline: 0 !important;\\n\\n  /* Prevents the entire page from getting larger\\n     when the magnify tool is near the sides/corners of the page */\\n  overflow: hidden;\\n  \\n  /* Prevent text selection on the viewport element */\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\\n/* Prevent text selection on overlay elements */\\n.noselect {\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\\n/* Ensure all elements within viewport wrapper prevent text selection */\\n.viewport-wrapper * {\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\ncustom overlay panels: top-left, top-right, bottom-left and bottom-right\nIf any text to be displayed on the overlay is too long to hold on a single\nline, it will be truncated with ellipsis in the end.\n*/\n.viewport-overlay {\n  max-width: 40%;\n}\n.viewport-overlay span {\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.viewport-overlay.left-viewport {\n  text-align: left;\n}\n.viewport-overlay.right-viewport-scrollbar {\n  text-align: right;\n}\n.viewport-overlay.right-viewport-scrollbar .flex.flex-row {\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.css\"],\"names\":[],\"mappings\":\"AAAA;;;;CAIC;AACD;EACE,cAAc;AAChB;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;AACrB;AAEA;EACE,gBAAgB;AAClB;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,qBAAyB;MAAzB,kBAAyB;UAAzB,yBAAyB;AAC3B\",\"sourcesContent\":[\"/*\\ncustom overlay panels: top-left, top-right, bottom-left and bottom-right\\nIf any text to be displayed on the overlay is too long to hold on a single\\nline, it will be truncated with ellipsis in the end.\\n*/\\n.viewport-overlay {\\n  max-width: 40%;\\n}\\n.viewport-overlay span {\\n  max-width: 100%;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n.viewport-overlay.left-viewport {\\n  text-align: left;\\n}\\n\\n.viewport-overlay.right-viewport-scrollbar {\\n  text-align: right;\\n}\\n.viewport-overlay.right-viewport-scrollbar .flex.flex-row {\\n  justify-content: flex-end;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.ViewportOrientationMarkers {\n  --marker-width: 100px;\n  --marker-height: 100px;\n  --scrollbar-width: 20px;\n  pointer-events: none;\n  line-height: 18px;\n}\n.ViewportOrientationMarkers .orientation-marker {\n  position: absolute;\n}\n.ViewportOrientationMarkers .top-mid {\n  top: 0.38rem;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n.ViewportOrientationMarkers .left-mid {\n  top: 50%;\n  left: 0.38rem;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n.ViewportOrientationMarkers .right-mid {\n  top: 50%;\n  left: calc(100% - var(--marker-width) - var(--scrollbar-width));\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n.ViewportOrientationMarkers .bottom-mid {\n  top: calc(100% - var(--marker-height) - 0.6rem);\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n.ViewportOrientationMarkers .right-mid .orientation-marker-value {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  min-width: var(--marker-width);\n}\n.ViewportOrientationMarkers .bottom-mid .orientation-marker-value {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: start;\n      -ms-flex-pack: start;\n          justify-content: flex-start;\n  min-height: var(--marker-height);\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n      -ms-flex-direction: column-reverse;\n          flex-direction: column-reverse;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,uBAAuB;EACvB,oBAAoB;EACpB,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,SAAS;EACT,mCAA2B;UAA3B,2BAA2B;AAC7B;AACA;EACE,QAAQ;EACR,aAAa;EACb,mCAA2B;UAA3B,2BAA2B;AAC7B;AACA;EACE,QAAQ;EACR,+DAA+D;EAC/D,mCAA2B;UAA3B,2BAA2B;AAC7B;AACA;EACE,+CAA+C;EAC/C,SAAS;EACT,mCAA2B;UAA3B,2BAA2B;AAC7B;AACA;EACE,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,qBAAyB;MAAzB,kBAAyB;UAAzB,yBAAyB;EACzB,8BAA8B;AAChC;AACA;EACE,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,uBAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAC3B,gCAAgC;EAChC,4BAA8B;EAA9B,8BAA8B;MAA9B,kCAA8B;UAA9B,8BAA8B;AAChC\",\"sourcesContent\":[\".ViewportOrientationMarkers {\\n  --marker-width: 100px;\\n  --marker-height: 100px;\\n  --scrollbar-width: 20px;\\n  pointer-events: none;\\n  line-height: 18px;\\n}\\n.ViewportOrientationMarkers .orientation-marker {\\n  position: absolute;\\n}\\n.ViewportOrientationMarkers .top-mid {\\n  top: 0.38rem;\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n.ViewportOrientationMarkers .left-mid {\\n  top: 50%;\\n  left: 0.38rem;\\n  transform: translateY(-50%);\\n}\\n.ViewportOrientationMarkers .right-mid {\\n  top: 50%;\\n  left: calc(100% - var(--marker-width) - var(--scrollbar-width));\\n  transform: translateY(-50%);\\n}\\n.ViewportOrientationMarkers .bottom-mid {\\n  top: calc(100% - var(--marker-height) - 0.6rem);\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n.ViewportOrientationMarkers .right-mid .orientation-marker-value {\\n  display: flex;\\n  justify-content: flex-end;\\n  min-width: var(--marker-width);\\n}\\n.ViewportOrientationMarkers .bottom-mid .orientation-marker-value {\\n  display: flex;\\n  justify-content: flex-start;\\n  min-height: var(--marker-height);\\n  flex-direction: column-reverse;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":[],"sourceRoot":""}