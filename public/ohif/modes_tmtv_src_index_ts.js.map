{"version":3,"file":"modes_tmtv_src_index_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAOA;AAMA;AAGA;AACA;AACA;AAQA;AAKA;AAIA;AAQA;AAMA;AAIA;AAOA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChLA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChbA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AAKA","sources":["file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/id.js","file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/index.ts","file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/initToolGroups.js","file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/toolbarButtons.ts","file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/utils/setCrosshairsConfiguration.js","file:////home/balasakthi/Downloads/Viewers-master/modes/tmtv/src/utils/setFusionActiveVolume.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { classes } from '@ohif/core';\nimport toolbarButtons from './toolbarButtons';\nimport { id } from './id.js';\nimport initToolGroups from './initToolGroups.js';\nimport setCrosshairsConfiguration from './utils/setCrosshairsConfiguration.js';\nimport setFusionActiveVolume from './utils/setFusionActiveVolume.js';\nimport i18n from 'i18next';\n\nconst { MetadataProvider } = classes;\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\n};\n\nconst cs3d = {\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\n  segPanel: '@ohif/extension-cornerstone.panelModule.panelSegmentationNoHeader',\n  measurements: '@ohif/extension-cornerstone.panelModule.measurements',\n};\n\nconst tmtv = {\n  hangingProtocol: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  petSUV: '@ohif/extension-tmtv.panelModule.petSUV',\n  tmtv: '@ohif/extension-tmtv.panelModule.tmtv',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-seg': '^3.0.0',\n  '@ohif/extension-tmtv': '^3.0.0',\n};\n\nconst unsubscriptions = [];\nfunction modeFactory({ modeConfiguration }) {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'tmtv',\n    displayName: i18n.t('Modes:Total Metabolic Tumor Volume'),\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }: withAppTypes) => {\n      const {\n        toolbarService,\n        toolGroupService,\n        customizationService,\n        hangingProtocolService,\n        displaySetService,\n      } = servicesManager.services;\n\n      const utilityModule = extensionManager.getModuleEntry(\n        '@ohif/extension-cornerstone.utilityModule.tools'\n      );\n\n      const { toolNames, Enums } = utilityModule.exports;\n\n      // Init Default and SR ToolGroups\n      initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\n\n      const { unsubscribe } = toolGroupService.subscribe(\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\n        () => {\n          // For fusion toolGroup we need to add the volumeIds for the crosshairs\n          // since in the fusion viewport we don't want both PT and CT to render MIP\n          // when slabThickness is modified\n          const { displaySetMatchDetails } = hangingProtocolService.getMatchDetails();\n\n          setCrosshairsConfiguration(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n\n          setFusionActiveVolume(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n        }\n      );\n\n      unsubscriptions.push(unsubscribe);\n      toolbarService.register(toolbarButtons);\n      toolbarService.updateSection(toolbarService.sections.primary, [\n        'MeasurementTools',\n        'Zoom',\n        'Pan',\n        'WindowLevel',\n        'Crosshairs',\n      ]);\n\n      toolbarService.updateSection(toolbarService.sections.viewportActionMenu.topLeft, [\n        'orientationMenu',\n        'dataOverlayMenu',\n      ]);\n\n      toolbarService.updateSection(toolbarService.sections.viewportActionMenu.bottomMiddle, [\n        'AdvancedRenderingControls',\n      ]);\n\n      toolbarService.updateSection('AdvancedRenderingControls', [\n        'windowLevelMenuEmbedded',\n        'voiManualControlMenu',\n        'Colorbar',\n        'opacityMenu',\n        'thresholdMenu',\n      ]);\n\n      toolbarService.updateSection(toolbarService.sections.viewportActionMenu.topRight, [\n        'modalityLoadBadge',\n        'trackingStatus',\n        'navigationComponent',\n      ]);\n\n      toolbarService.updateSection(toolbarService.sections.viewportActionMenu.bottomLeft, [\n        'windowLevelMenu',\n      ]);\n\n      toolbarService.updateSection('MeasurementTools', [\n        'Length',\n        'Bidirectional',\n        'ArrowAnnotate',\n        'EllipticalROI',\n      ]);\n\n      toolbarService.updateSection('ROIThresholdToolbox', ['SegmentationTools']);\n      toolbarService.updateSection('SegmentationTools', [\n        'RectangleROIStartEndThreshold',\n        'BrushTools',\n      ]);\n\n      toolbarService.updateSection('BrushTools', ['Brush', 'Eraser', 'Threshold']);\n\n      customizationService.setCustomizations({\n        'panelSegmentation.tableMode': {\n          $set: 'expanded',\n        },\n        'panelSegmentation.onSegmentationAdd': {\n          $set: () => {\n            commandsManager.run('createNewLabelmapFromPT');\n          },\n        },\n      });\n\n      // For the hanging protocol we need to decide on the window level\n      // based on whether the SUV is corrected or not, hence we can't hard\n      // code the window level in the hanging protocol but we add a custom\n      // attribute to the hanging protocol that will be used to get the\n      // window level based on the metadata\n      hangingProtocolService.addCustomAttribute(\n        'getPTVOIRange',\n        'get PT VOI based on corrected or not',\n        props => {\n          const ptDisplaySet = props.find(imageSet => imageSet.Modality === 'PT');\n\n          if (!ptDisplaySet) {\n            return;\n          }\n\n          const { imageId } = ptDisplaySet.images[0];\n          const imageIdScalingFactor = MetadataProvider.get('scalingModule', imageId);\n\n          const isSUVAvailable = imageIdScalingFactor && imageIdScalingFactor.suvbw;\n\n          if (isSUVAvailable) {\n            return {\n              windowWidth: 5,\n              windowCenter: 2.5,\n            };\n          }\n\n          return;\n        }\n      );\n    },\n    onModeExit: ({ servicesManager }: withAppTypes) => {\n      const {\n        toolGroupService,\n        syncGroupService,\n        segmentationService,\n        cornerstoneViewportService,\n        uiDialogService,\n        uiModalService,\n      } = servicesManager.services;\n\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\n      uiDialogService.hideAll();\n      uiModalService.hide();\n      toolGroupService.destroy();\n      syncGroupService.destroy();\n      segmentationService.destroy();\n      cornerstoneViewportService.destroy();\n    },\n    validationTags: {\n      study: [],\n      series: [],\n    },\n    isValidMode: ({ modalities, study }) => {\n      const modalities_list = modalities.split('\\\\');\n      const invalidModalities = ['SM'];\n\n      const isValid =\n        modalities_list.includes('CT') &&\n        study.mrn !== 'M1' &&\n        modalities_list.includes('PT') &&\n        !invalidModalities.some(modality => modalities_list.includes(modality)) &&\n        // This is study is a 4D study with PT and CT and not a 3D study for the tmtv\n        // mode, until we have a better way to identify 4D studies we will use the\n        // StudyInstanceUID to identify the study\n        // Todo: when we add the 4D mode which comes with a mechanism to identify\n        // 4D studies we can use that\n        study.studyInstanceUid !== '1.3.6.1.4.1.12842.1.1.14.3.20220915.105557.468.2963630849';\n\n      // there should be both CT and PT modalities and the modality should not be SM\n      return {\n        valid: isValid,\n        description: 'The mode requires both PT and CT series in the study',\n      };\n    },\n    routes: [\n      {\n        path: 'tmtv',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: () => {\n          return {\n            id: ohif.layout,\n            props: {\n              leftPanels: [ohif.thumbnailList],\n              leftPanelResizable: true,\n              leftPanelClosed: true,\n              rightPanels: [tmtv.tmtv, tmtv.petSUV],\n              rightPanelResizable: true,\n              viewports: [\n                {\n                  namespace: cs3d.viewport,\n                  displaySetsToDisplay: [ohif.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    hangingProtocol: tmtv.hangingProtocol,\n    sopClassHandlers: [ohif.sopClassHandler],\n    ...modeConfiguration,\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n","export const toolGroupIds = {\n  CT: 'ctToolGroup',\n  PT: 'ptToolGroup',\n  Fusion: 'fusionToolGroup',\n  MIP: 'mipToolGroup',\n  default: 'default',\n};\n\nfunction _initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }, { numTouchPoints: 2 }],\n      },\n      {\n        toolName: toolNames.StackScroll,\n        bindings: [{ mouseButton: Enums.MouseBindings.Wheel }, { numTouchPoints: 3 }],\n      },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      { toolName: toolNames.SegmentBidirectional },\n      {\n        toolName: toolNames.ArrowAnnotate,\n        configuration: {\n          getTextCallback: (callback, eventDetails) => {\n            commandsManager.runCommand('arrowTextCallback', {\n              callback,\n              eventDetails,\n            });\n          },\n          changeTextCallback: (data, eventDetails, callback) => {\n            commandsManager.runCommand('arrowTextCallback', {\n              callback,\n              data,\n              eventDetails,\n            });\n          },\n        },\n      },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.Probe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.CobbAngle },\n      { toolName: toolNames.Magnify },\n      {\n        toolName: 'CircularBrush',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'FILL_INSIDE_CIRCLE',\n        },\n      },\n      {\n        toolName: 'CircularEraser',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'ERASE_INSIDE_CIRCLE',\n        },\n      },\n      {\n        toolName: 'SphereBrush',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'FILL_INSIDE_SPHERE',\n        },\n      },\n      {\n        toolName: 'SphereEraser',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'ERASE_INSIDE_SPHERE',\n        },\n      },\n      {\n        toolName: 'ThresholdCircularBrush',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'THRESHOLD_INSIDE_CIRCLE',\n        },\n      },\n      {\n        toolName: 'ThresholdSphereBrush',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'THRESHOLD_INSIDE_SPHERE',\n        },\n      },\n      {\n        toolName: 'ThresholdCircularBrushDynamic',\n        parentTool: 'Brush',\n        configuration: {\n          activeStrategy: 'THRESHOLD_INSIDE_CIRCLE',\n          // preview: {\n          //   enabled: true,\n          // },\n          threshold: {\n            isDynamic: true,\n            dynamicRadius: 3,\n          },\n        },\n      },\n    ],\n    enabled: [],\n    disabled: [\n      {\n        toolName: toolNames.Crosshairs,\n        configuration: {\n          disableOnPassive: true,\n          autoPan: {\n            enabled: false,\n            panSize: 10,\n          },\n        },\n      },\n    ],\n  };\n\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.CT, tools);\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.PT, {\n    active: tools.active,\n    passive: [...tools.passive, { toolName: 'RectangleROIStartEndThreshold' }],\n    enabled: tools.enabled,\n    disabled: tools.disabled,\n  });\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.Fusion, tools);\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.default, tools);\n\n  const mipTools = {\n    active: [\n      {\n        toolName: toolNames.VolumeRotate,\n        bindings: [{ mouseButton: Enums.MouseBindings.Wheel }],\n        configuration: {\n          rotateIncrementDegrees: 5,\n        },\n      },\n      {\n        toolName: toolNames.MipJumpToClick,\n        configuration: {\n          toolGroupId: toolGroupIds.PT,\n        },\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n    ],\n    enabled: [\n      {\n        toolName: toolNames.OrientationMarker,\n        configuration: {\n          orientationWidget: {\n            viewportCorner: 'BOTTOM_LEFT',\n          },\n        },\n      },\n    ],\n  };\n\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.MIP, mipTools);\n}\n\nfunction initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\n  _initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\n}\n\nexport default initToolGroups;\n","import { toolGroupIds } from './initToolGroups';\n\nconst setToolActiveToolbar = {\n  commandName: 'setToolActiveToolbar',\n  commandOptions: {\n    toolGroupIds: [toolGroupIds.CT, toolGroupIds.PT, toolGroupIds.Fusion],\n  },\n};\n\nconst toolbarButtons = [\n  {\n    id: 'MeasurementTools',\n    uiType: 'ohif.toolButtonList',\n    props: {\n      buttonSection: true,\n    },\n  },\n  {\n    id: 'SegmentationTools',\n    uiType: 'ohif.toolBoxButton',\n    props: {\n      buttonSection: true,\n    },\n  },\n  {\n    id: 'BrushTools',\n    uiType: 'ohif.toolBoxButtonGroup',\n    props: {\n      buttonSection: true,\n    },\n  },\n  {\n    id: 'AdvancedRenderingControls',\n    uiType: 'ohif.advancedRenderingControls',\n    props: {\n      buttonSection: true,\n    },\n  },\n  {\n    id: 'modalityLoadBadge',\n    uiType: 'ohif.modalityLoadBadge',\n    props: {\n      icon: 'Status',\n      label: 'Status',\n      tooltip: 'Status',\n      evaluate: {\n        name: 'evaluate.modalityLoadBadge',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'Colorbar',\n    uiType: 'ohif.colorbar',\n    props: {\n      type: 'tool',\n      label: 'Colorbar',\n    },\n  },\n  {\n    id: 'navigationComponent',\n    uiType: 'ohif.navigationComponent',\n    props: {\n      icon: 'Navigation',\n      label: 'Navigation',\n      tooltip: 'Navigate between segments/measurements and manage their visibility',\n      evaluate: {\n        name: 'evaluate.navigationComponent',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'windowLevelMenuEmbedded',\n    uiType: 'ohif.windowLevelMenuEmbedded',\n    props: {\n      icon: 'WindowLevel',\n      label: 'Window Level',\n      tooltip: 'Adjust window/level presets and customize image contrast settings',\n      evaluate: {\n        name: 'evaluate.windowLevelMenuEmbedded',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'trackingStatus',\n    uiType: 'ohif.trackingStatus',\n    props: {\n      icon: 'TrackingStatus',\n      label: 'Tracking Status',\n      tooltip: 'View and manage tracking status of measurements and annotations',\n      evaluate: {\n        name: 'evaluate.trackingStatus',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'Length',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-length',\n      label: 'Length',\n      tooltip: 'Length Tool',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'Bidirectional',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-bidirectional',\n      label: 'Bidirectional',\n      tooltip: 'Bidirectional Tool',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'ArrowAnnotate',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-annotate',\n      label: 'Arrow Annotate',\n      tooltip: 'Arrow Annotate Tool',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'EllipticalROI',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-ellipse',\n      label: 'Ellipse',\n      tooltip: 'Ellipse Tool',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'Zoom',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-zoom',\n      label: 'Zoom',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'WindowLevel',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-window-level',\n      label: 'Window Level',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'Crosshairs',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-crosshair',\n      label: 'Crosshairs',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'Pan',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: setToolActiveToolbar,\n      evaluate: 'evaluate.cornerstoneTool',\n    },\n  },\n  {\n    id: 'RectangleROIStartEndThreshold',\n    uiType: 'ohif.toolBoxButton',\n    props: {\n      icon: 'tool-create-threshold',\n      label: 'Rectangle ROI Threshold',\n      commands: setToolActiveToolbar,\n      evaluate: [\n        'evaluate.cornerstone.segmentation',\n        {\n          name: 'evaluate.cornerstoneTool',\n          disabledText: 'Select the PT Axial to enable this tool',\n        },\n      ],\n      options: 'tmtv.RectangleROIThresholdOptions',\n    },\n  },\n\n  {\n    id: 'Brush',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'icon-tool-brush',\n      label: 'Brush',\n      evaluate: {\n        name: 'evaluate.cornerstone.segmentation',\n        toolNames: ['CircularBrush', 'SphereBrush'],\n        disabledText: 'Create new segmentation to enable this tool.',\n      },\n      options: [\n        {\n          name: 'Radius (mm)',\n          id: 'brush-radius',\n          type: 'range',\n          min: 0.5,\n          max: 99.5,\n          step: 0.5,\n          value: 25,\n          commands: {\n            commandName: 'setBrushSize',\n            commandOptions: { toolNames: ['CircularBrush', 'SphereBrush'] },\n          },\n        },\n        {\n          name: 'Shape',\n          type: 'radio',\n          id: 'brush-mode',\n          value: 'CircularBrush',\n          values: [\n            { value: 'CircularBrush', label: 'Circle' },\n            { value: 'SphereBrush', label: 'Sphere' },\n          ],\n          commands: 'setToolActiveToolbar',\n        },\n      ],\n    },\n  },\n  {\n    id: 'Eraser',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'icon-tool-eraser',\n      label: 'Eraser',\n      evaluate: {\n        name: 'evaluate.cornerstone.segmentation',\n        toolNames: ['CircularEraser', 'SphereEraser'],\n      },\n      options: [\n        {\n          name: 'Radius (mm)',\n          id: 'eraser-radius',\n          type: 'range',\n          min: 0.5,\n          max: 99.5,\n          step: 0.5,\n          value: 25,\n          commands: {\n            commandName: 'setBrushSize',\n            commandOptions: { toolNames: ['CircularEraser', 'SphereEraser'] },\n          },\n        },\n        {\n          name: 'Shape',\n          type: 'radio',\n          id: 'eraser-mode',\n          value: 'CircularEraser',\n          values: [\n            { value: 'CircularEraser', label: 'Circle' },\n            { value: 'SphereEraser', label: 'Sphere' },\n          ],\n          commands: 'setToolActiveToolbar',\n        },\n      ],\n    },\n  },\n  {\n    id: 'Threshold',\n    uiType: 'ohif.toolButton',\n    props: {\n      icon: 'icon-tool-threshold',\n      label: 'Threshold Tool',\n      evaluate: {\n        name: 'evaluate.cornerstone.segmentation',\n        toolNames: ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n      },\n      options: [\n        {\n          name: 'Radius (mm)',\n          id: 'threshold-radius',\n          type: 'range',\n          min: 0.5,\n          max: 99.5,\n          step: 0.5,\n          value: 25,\n          commands: {\n            commandName: 'setBrushSize',\n            commandOptions: {\n              toolNames: [\n                'ThresholdCircularBrush',\n                'ThresholdSphereBrush',\n                'ThresholdCircularBrushDynamic',\n              ],\n            },\n          },\n        },\n        {\n          name: 'Threshold',\n          type: 'radio',\n          id: 'dynamic-mode',\n          value: 'ThresholdRange',\n          values: [\n            { value: 'ThresholdDynamic', label: 'Dynamic' },\n            { value: 'ThresholdRange', label: 'Range' },\n          ],\n          commands: ({ value, commandsManager }) => {\n            if (value === 'ThresholdDynamic') {\n              commandsManager.run('setToolActive', {\n                toolName: 'ThresholdCircularBrushDynamic',\n              });\n            } else {\n              commandsManager.run('setToolActive', {\n                toolName: 'ThresholdCircularBrush',\n              });\n            }\n          },\n        },\n        {\n          name: 'Shape',\n          type: 'radio',\n          id: 'eraser-mode',\n          value: 'ThresholdCircularBrush',\n          values: [\n            { value: 'ThresholdCircularBrush', label: 'Circle' },\n            { value: 'ThresholdSphereBrush', label: 'Sphere' },\n          ],\n          condition: ({ options }) =>\n            options.find(option => option.id === 'dynamic-mode').value === 'ThresholdRange',\n          commands: 'setToolActiveToolbar',\n        },\n        {\n          name: 'ThresholdRange',\n          type: 'double-range',\n          id: 'threshold-range',\n          min: 0,\n          max: 50,\n          step: 0.5,\n          value: [2.5, 50],\n          condition: ({ options }) =>\n            options.find(option => option.id === 'dynamic-mode').value === 'ThresholdRange',\n          commands: {\n            commandName: 'setThresholdRange',\n            commandOptions: {\n              toolNames: ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n            },\n          },\n        },\n      ],\n    },\n  },\n  {\n    id: 'dataOverlayMenu',\n    uiType: 'ohif.dataOverlayMenu',\n    props: {\n      icon: 'ViewportViews',\n      label: 'Data Overlay',\n      tooltip: 'Configure data overlay options and manage foreground/background display sets',\n      evaluate: 'evaluate.dataOverlayMenu',\n    },\n  },\n  {\n    id: 'orientationMenu',\n    uiType: 'ohif.orientationMenu',\n    props: {\n      icon: 'OrientationSwitch',\n      label: 'Orientation',\n      tooltip: 'Change viewport orientation between axial, sagittal, coronal and reformat planes',\n      evaluate: {\n        name: 'evaluate.orientationMenu',\n        // hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'windowLevelMenu',\n    uiType: 'ohif.windowLevelMenu',\n    props: {\n      icon: 'WindowLevel',\n      label: 'Window Level',\n      tooltip: 'Adjust window/level presets and customize image contrast settings',\n      evaluate: 'evaluate.windowLevelMenu',\n    },\n  },\n  {\n    id: 'voiManualControlMenu',\n    uiType: 'ohif.voiManualControlMenu',\n    props: {\n      icon: 'WindowLevelAdvanced',\n      label: 'Advanced Window Level',\n      tooltip: 'Advanced window/level settings with manual controls and presets',\n      evaluate: 'evaluate.voiManualControlMenu',\n    },\n  },\n  {\n    id: 'thresholdMenu',\n    uiType: 'ohif.thresholdMenu',\n    props: {\n      icon: 'Threshold',\n      label: 'Threshold',\n      tooltip: 'Image threshold settings',\n      evaluate: {\n        name: 'evaluate.thresholdMenu',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n  {\n    id: 'opacityMenu',\n    uiType: 'ohif.opacityMenu',\n    props: {\n      icon: 'Opacity',\n      label: 'Opacity',\n      tooltip: 'Image opacity settings',\n      evaluate: {\n        name: 'evaluate.opacityMenu',\n        hideWhenDisabled: true,\n      },\n    },\n  },\n];\n\nexport default toolbarButtons;\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setCrosshairsConfiguration(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ctDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n\n  const toolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs\n  );\n\n  const crosshairsConfig = {\n    ...toolConfig,\n    filterActorUIDsToSetSlabThickness: [displaySets[0].displaySetInstanceUID],\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs,\n    crosshairsConfig\n  );\n}\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setFusionActiveVolume(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ptDisplaySet');\n  const matchDetails2 = matches.get('ctDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n\n  if (!displaySets || displaySets.length === 0) {\n    return;\n  }\n\n  const wlToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel\n  );\n\n  const ellipticalToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI\n  );\n\n  // Todo: this should not take into account the loader id\n  const volumeId = `cornerstoneStreamingImageVolume:${displaySets[0].displaySetInstanceUID}`;\n  const { SeriesInstanceUID: SeriesInstanceUID2 } = matchDetails2;\n  const ctDisplaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID2);\n  const ctVolumeId = `cornerstoneStreamingImageVolume:${ctDisplaySets[0].displaySetInstanceUID}`;\n\n  const windowLevelConfig = {\n    ...wlToolConfig,\n    volumeId: ctVolumeId,\n  };\n\n  const ellipticalROIConfig = {\n    ...ellipticalToolConfig,\n    volumeId,\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel,\n    windowLevelConfig\n  );\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI,\n    ellipticalROIConfig\n  );\n}\n"],"names":[],"sourceRoot":""}